# DO NOT CHANGE THIS FILE! This file is auto-generated by facade.py.
# Changes will be overwritten/lost when the file is regenerated.

from juju.client.facade import Type, ReturnMapping
from juju.client._definitions import *


class ApplicationFacade(Type):
    name = 'Application'
    version = 18
    schema =     {'definitions': {'AddApplicationUnits': {'additionalProperties': False,
                                             'properties': {'application': {'type': 'string'},
                                                            'attach-storage': {'items': {'type': 'string'},
                                                                               'type': 'array'},
                                                            'num-units': {'type': 'integer'},
                                                            'placement': {'items': {'$ref': '#/definitions/Placement'},
                                                                          'type': 'array'},
                                                            'policy': {'type': 'string'}},
                                             'required': ['application',
                                                          'num-units',
                                                          'placement'],
                                             'type': 'object'},
                     'AddApplicationUnitsResults': {'additionalProperties': False,
                                                    'properties': {'units': {'items': {'type': 'string'},
                                                                             'type': 'array'}},
                                                    'required': ['units'],
                                                    'type': 'object'},
                     'AddRelation': {'additionalProperties': False,
                                     'properties': {'endpoints': {'items': {'type': 'string'},
                                                                  'type': 'array'},
                                                    'via-cidrs': {'items': {'type': 'string'},
                                                                  'type': 'array'}},
                                     'required': ['endpoints'],
                                     'type': 'object'},
                     'AddRelationResults': {'additionalProperties': False,
                                            'properties': {'endpoints': {'patternProperties': {'.*': {'$ref': '#/definitions/CharmRelation'}},
                                                                         'type': 'object'}},
                                            'required': ['endpoints'],
                                            'type': 'object'},
                     'ApplicationCharmRelations': {'additionalProperties': False,
                                                   'properties': {'application': {'type': 'string'}},
                                                   'required': ['application'],
                                                   'type': 'object'},
                     'ApplicationCharmRelationsResults': {'additionalProperties': False,
                                                          'properties': {'charm-relations': {'items': {'type': 'string'},
                                                                                             'type': 'array'}},
                                                          'required': ['charm-relations'],
                                                          'type': 'object'},
                     'ApplicationConfigUnsetArgs': {'additionalProperties': False,
                                                    'properties': {'Args': {'items': {'$ref': '#/definitions/ApplicationUnset'},
                                                                            'type': 'array'}},
                                                    'required': ['Args'],
                                                    'type': 'object'},
                     'ApplicationConstraint': {'additionalProperties': False,
                                               'properties': {'constraints': {'$ref': '#/definitions/Value'},
                                                              'error': {'$ref': '#/definitions/Error'}},
                                               'required': ['constraints'],
                                               'type': 'object'},
                     'ApplicationDeploy': {'additionalProperties': False,
                                           'properties': {'Force': {'type': 'boolean'},
                                                          'application': {'type': 'string'},
                                                          'attach-storage': {'items': {'type': 'string'},
                                                                             'type': 'array'},
                                                          'channel': {'type': 'string'},
                                                          'charm-origin': {'$ref': '#/definitions/CharmOrigin'},
                                                          'charm-url': {'type': 'string'},
                                                          'config': {'patternProperties': {'.*': {'type': 'string'}},
                                                                     'type': 'object'},
                                                          'config-yaml': {'type': 'string'},
                                                          'constraints': {'$ref': '#/definitions/Value'},
                                                          'devices': {'patternProperties': {'.*': {'$ref': '#/definitions/Constraints'}},
                                                                      'type': 'object'},
                                                          'endpoint-bindings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                                'type': 'object'},
                                                          'num-units': {'type': 'integer'},
                                                          'placement': {'items': {'$ref': '#/definitions/Placement'},
                                                                        'type': 'array'},
                                                          'policy': {'type': 'string'},
                                                          'resources': {'patternProperties': {'.*': {'type': 'string'}},
                                                                        'type': 'object'},
                                                          'storage': {'patternProperties': {'.*': {'$ref': '#/definitions/Constraints'}},
                                                                      'type': 'object'}},
                                           'required': ['application',
                                                        'charm-url',
                                                        'channel',
                                                        'num-units',
                                                        'config-yaml',
                                                        'constraints',
                                                        'Force'],
                                           'type': 'object'},
                     'ApplicationExpose': {'additionalProperties': False,
                                           'properties': {'application': {'type': 'string'},
                                                          'exposed-endpoints': {'patternProperties': {'.*': {'$ref': '#/definitions/ExposedEndpoint'}},
                                                                                'type': 'object'}},
                                           'required': ['application'],
                                           'type': 'object'},
                     'ApplicationGet': {'additionalProperties': False,
                                        'properties': {'application': {'type': 'string'},
                                                       'branch': {'type': 'string'}},
                                        'required': ['application', 'branch'],
                                        'type': 'object'},
                     'ApplicationGetArgs': {'additionalProperties': False,
                                            'properties': {'args': {'items': {'$ref': '#/definitions/ApplicationGet'},
                                                                    'type': 'array'}},
                                            'required': ['args'],
                                            'type': 'object'},
                     'ApplicationGetConfigResults': {'additionalProperties': False,
                                                     'properties': {'Results': {'items': {'$ref': '#/definitions/ConfigResult'},
                                                                                'type': 'array'}},
                                                     'required': ['Results'],
                                                     'type': 'object'},
                     'ApplicationGetConstraintsResults': {'additionalProperties': False,
                                                          'properties': {'results': {'items': {'$ref': '#/definitions/ApplicationConstraint'},
                                                                                     'type': 'array'}},
                                                          'required': ['results'],
                                                          'type': 'object'},
                     'ApplicationGetResults': {'additionalProperties': False,
                                               'properties': {'application': {'type': 'string'},
                                                              'application-config': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                                  'type': 'object'}},
                                                                                     'type': 'object'},
                                                              'base': {'$ref': '#/definitions/Base'},
                                                              'channel': {'type': 'string'},
                                                              'charm': {'type': 'string'},
                                                              'config': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                      'type': 'object'}},
                                                                         'type': 'object'},
                                                              'constraints': {'$ref': '#/definitions/Value'},
                                                              'endpoint-bindings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                                    'type': 'object'}},
                                               'required': ['application',
                                                            'charm',
                                                            'config',
                                                            'constraints',
                                                            'base',
                                                            'channel'],
                                               'type': 'object'},
                     'ApplicationInfoResult': {'additionalProperties': False,
                                               'properties': {'error': {'$ref': '#/definitions/Error'},
                                                              'result': {'$ref': '#/definitions/ApplicationResult'}},
                                               'type': 'object'},
                     'ApplicationInfoResults': {'additionalProperties': False,
                                                'properties': {'results': {'items': {'$ref': '#/definitions/ApplicationInfoResult'},
                                                                           'type': 'array'}},
                                                'required': ['results'],
                                                'type': 'object'},
                     'ApplicationMergeBindings': {'additionalProperties': False,
                                                  'properties': {'application-tag': {'type': 'string'},
                                                                 'bindings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                              'type': 'object'},
                                                                 'force': {'type': 'boolean'}},
                                                  'required': ['application-tag',
                                                               'bindings',
                                                               'force'],
                                                  'type': 'object'},
                     'ApplicationMergeBindingsArgs': {'additionalProperties': False,
                                                      'properties': {'args': {'items': {'$ref': '#/definitions/ApplicationMergeBindings'},
                                                                              'type': 'array'}},
                                                      'required': ['args'],
                                                      'type': 'object'},
                     'ApplicationMetricCredential': {'additionalProperties': False,
                                                     'properties': {'application': {'type': 'string'},
                                                                    'metrics-credentials': {'items': {'type': 'integer'},
                                                                                            'type': 'array'}},
                                                     'required': ['application',
                                                                  'metrics-credentials'],
                                                     'type': 'object'},
                     'ApplicationMetricCredentials': {'additionalProperties': False,
                                                      'properties': {'creds': {'items': {'$ref': '#/definitions/ApplicationMetricCredential'},
                                                                               'type': 'array'}},
                                                      'required': ['creds'],
                                                      'type': 'object'},
                     'ApplicationOfferDetails': {'additionalProperties': False,
                                                 'properties': {'application-description': {'type': 'string'},
                                                                'bindings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                             'type': 'object'},
                                                                'endpoints': {'items': {'$ref': '#/definitions/RemoteEndpoint'},
                                                                              'type': 'array'},
                                                                'offer-name': {'type': 'string'},
                                                                'offer-url': {'type': 'string'},
                                                                'offer-uuid': {'type': 'string'},
                                                                'source-model-tag': {'type': 'string'},
                                                                'spaces': {'items': {'$ref': '#/definitions/RemoteSpace'},
                                                                           'type': 'array'},
                                                                'users': {'items': {'$ref': '#/definitions/OfferUserDetails'},
                                                                          'type': 'array'}},
                                                 'required': ['source-model-tag',
                                                              'offer-uuid',
                                                              'offer-url',
                                                              'offer-name',
                                                              'application-description'],
                                                 'type': 'object'},
                     'ApplicationResult': {'additionalProperties': False,
                                           'properties': {'base': {'$ref': '#/definitions/Base'},
                                                          'channel': {'type': 'string'},
                                                          'charm': {'type': 'string'},
                                                          'constraints': {'$ref': '#/definitions/Value'},
                                                          'endpoint-bindings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                                'type': 'object'},
                                                          'exposed': {'type': 'boolean'},
                                                          'exposed-endpoints': {'patternProperties': {'.*': {'$ref': '#/definitions/ExposedEndpoint'}},
                                                                                'type': 'object'},
                                                          'life': {'type': 'string'},
                                                          'principal': {'type': 'boolean'},
                                                          'remote': {'type': 'boolean'},
                                                          'tag': {'type': 'string'}},
                                           'required': ['tag',
                                                        'principal',
                                                        'exposed',
                                                        'remote',
                                                        'life'],
                                           'type': 'object'},
                     'ApplicationSetCharm': {'additionalProperties': False,
                                             'properties': {'application': {'type': 'string'},
                                                            'channel': {'type': 'string'},
                                                            'charm-origin': {'$ref': '#/definitions/CharmOrigin'},
                                                            'charm-url': {'type': 'string'},
                                                            'config-settings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                                'type': 'object'},
                                                            'config-settings-yaml': {'type': 'string'},
                                                            'endpoint-bindings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                                  'type': 'object'},
                                                            'force': {'type': 'boolean'},
                                                            'force-base': {'type': 'boolean'},
                                                            'force-units': {'type': 'boolean'},
                                                            'generation': {'type': 'string'},
                                                            'resource-ids': {'patternProperties': {'.*': {'type': 'string'}},
                                                                             'type': 'object'},
                                                            'storage-constraints': {'patternProperties': {'.*': {'$ref': '#/definitions/StorageConstraints'}},
                                                                                    'type': 'object'}},
                                             'required': ['application',
                                                          'generation',
                                                          'charm-url',
                                                          'channel',
                                                          'force',
                                                          'force-units',
                                                          'force-base'],
                                             'type': 'object'},
                     'ApplicationUnexpose': {'additionalProperties': False,
                                             'properties': {'application': {'type': 'string'},
                                                            'exposed-endpoints': {'items': {'type': 'string'},
                                                                                  'type': 'array'}},
                                             'required': ['application',
                                                          'exposed-endpoints'],
                                             'type': 'object'},
                     'ApplicationUnset': {'additionalProperties': False,
                                          'properties': {'application': {'type': 'string'},
                                                         'branch': {'type': 'string'},
                                                         'options': {'items': {'type': 'string'},
                                                                     'type': 'array'}},
                                          'required': ['application',
                                                       'branch',
                                                       'options'],
                                          'type': 'object'},
                     'ApplicationsDeploy': {'additionalProperties': False,
                                            'properties': {'applications': {'items': {'$ref': '#/definitions/ApplicationDeploy'},
                                                                            'type': 'array'}},
                                            'required': ['applications'],
                                            'type': 'object'},
                     'Base': {'additionalProperties': False,
                              'properties': {'channel': {'type': 'string'},
                                             'name': {'type': 'string'}},
                              'required': ['name', 'channel'],
                              'type': 'object'},
                     'CharmOrigin': {'additionalProperties': False,
                                     'properties': {'architecture': {'type': 'string'},
                                                    'base': {'$ref': '#/definitions/Base'},
                                                    'branch': {'type': 'string'},
                                                    'hash': {'type': 'string'},
                                                    'id': {'type': 'string'},
                                                    'instance-key': {'type': 'string'},
                                                    'revision': {'type': 'integer'},
                                                    'risk': {'type': 'string'},
                                                    'source': {'type': 'string'},
                                                    'track': {'type': 'string'},
                                                    'type': {'type': 'string'}},
                                     'required': ['source', 'type', 'id'],
                                     'type': 'object'},
                     'CharmRelation': {'additionalProperties': False,
                                       'properties': {'interface': {'type': 'string'},
                                                      'limit': {'type': 'integer'},
                                                      'name': {'type': 'string'},
                                                      'optional': {'type': 'boolean'},
                                                      'role': {'type': 'string'},
                                                      'scope': {'type': 'string'}},
                                       'required': ['name',
                                                    'role',
                                                    'interface',
                                                    'optional',
                                                    'limit',
                                                    'scope'],
                                       'type': 'object'},
                     'CharmURLOriginResult': {'additionalProperties': False,
                                              'properties': {'charm-origin': {'$ref': '#/definitions/CharmOrigin'},
                                                             'error': {'$ref': '#/definitions/Error'},
                                                             'url': {'type': 'string'}},
                                              'required': ['url', 'charm-origin'],
                                              'type': 'object'},
                     'ConfigResult': {'additionalProperties': False,
                                      'properties': {'config': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                             'type': 'object'}},
                                                                'type': 'object'},
                                                     'error': {'$ref': '#/definitions/Error'}},
                                      'required': ['config'],
                                      'type': 'object'},
                     'ConfigSet': {'additionalProperties': False,
                                   'properties': {'application': {'type': 'string'},
                                                  'config': {'patternProperties': {'.*': {'type': 'string'}},
                                                             'type': 'object'},
                                                  'config-yaml': {'type': 'string'},
                                                  'generation': {'type': 'string'}},
                                   'required': ['application',
                                                'generation',
                                                'config',
                                                'config-yaml'],
                                   'type': 'object'},
                     'ConfigSetArgs': {'additionalProperties': False,
                                       'properties': {'Args': {'items': {'$ref': '#/definitions/ConfigSet'},
                                                               'type': 'array'}},
                                       'required': ['Args'],
                                       'type': 'object'},
                     'Constraints': {'additionalProperties': False,
                                     'properties': {'Count': {'type': 'integer'},
                                                    'Pool': {'type': 'string'},
                                                    'Size': {'type': 'integer'}},
                                     'required': ['Pool', 'Size', 'Count'],
                                     'type': 'object'},
                     'ConsumeApplicationArg': {'additionalProperties': False,
                                               'properties': {'ApplicationOfferDetails': {'$ref': '#/definitions/ApplicationOfferDetails'},
                                                              'application-alias': {'type': 'string'},
                                                              'application-description': {'type': 'string'},
                                                              'auth-token': {'type': 'string'},
                                                              'bindings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                           'type': 'object'},
                                                              'endpoints': {'items': {'$ref': '#/definitions/RemoteEndpoint'},
                                                                            'type': 'array'},
                                                              'external-controller': {'$ref': '#/definitions/ExternalControllerInfo'},
                                                              'macaroon': {'$ref': '#/definitions/Macaroon'},
                                                              'offer-name': {'type': 'string'},
                                                              'offer-url': {'type': 'string'},
                                                              'offer-uuid': {'type': 'string'},
                                                              'source-model-tag': {'type': 'string'},
                                                              'spaces': {'items': {'$ref': '#/definitions/RemoteSpace'},
                                                                         'type': 'array'},
                                                              'users': {'items': {'$ref': '#/definitions/OfferUserDetails'},
                                                                        'type': 'array'}},
                                               'required': ['source-model-tag',
                                                            'offer-uuid',
                                                            'offer-url',
                                                            'offer-name',
                                                            'application-description',
                                                            'ApplicationOfferDetails'],
                                               'type': 'object'},
                     'ConsumeApplicationArgs': {'additionalProperties': False,
                                                'properties': {'args': {'items': {'$ref': '#/definitions/ConsumeApplicationArg'},
                                                                        'type': 'array'}},
                                                'type': 'object'},
                     'DeployFromRepositoryArg': {'additionalProperties': False,
                                                 'properties': {'ApplicationName': {'type': 'string'},
                                                                'AttachStorage': {'items': {'type': 'string'},
                                                                                  'type': 'array'},
                                                                'CharmName': {'type': 'string'},
                                                                'ConfigYAML': {'type': 'string'},
                                                                'Cons': {'$ref': '#/definitions/Value'},
                                                                'Devices': {'patternProperties': {'.*': {'$ref': '#/definitions/Constraints'}},
                                                                            'type': 'object'},
                                                                'DryRun': {'type': 'boolean'},
                                                                'Placement': {'items': {'$ref': '#/definitions/Placement'},
                                                                              'type': 'array'},
                                                                'Storage': {'patternProperties': {'.*': {'$ref': '#/definitions/Constraints'}},
                                                                            'type': 'object'},
                                                                'Trust': {'type': 'boolean'},
                                                                'base': {'$ref': '#/definitions/Base'},
                                                                'channel': {'type': 'string'},
                                                                'endpoint-bindings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                                      'type': 'object'},
                                                                'force': {'type': 'boolean'},
                                                                'num-units': {'type': 'integer'},
                                                                'resources': {'patternProperties': {'.*': {'type': 'string'}},
                                                                              'type': 'object'},
                                                                'revision': {'type': 'integer'}},
                                                 'required': ['CharmName',
                                                              'ApplicationName',
                                                              'AttachStorage',
                                                              'ConfigYAML',
                                                              'Cons',
                                                              'Devices',
                                                              'DryRun',
                                                              'Placement',
                                                              'Storage',
                                                              'Trust'],
                                                 'type': 'object'},
                     'DeployFromRepositoryArgs': {'additionalProperties': False,
                                                  'properties': {'Args': {'items': {'$ref': '#/definitions/DeployFromRepositoryArg'},
                                                                          'type': 'array'}},
                                                  'required': ['Args'],
                                                  'type': 'object'},
                     'DeployFromRepositoryInfo': {'additionalProperties': False,
                                                  'properties': {'architecture': {'type': 'string'},
                                                                 'base': {'$ref': '#/definitions/Base'},
                                                                 'channel': {'type': 'string'},
                                                                 'effective-channel': {'type': 'string'},
                                                                 'name': {'type': 'string'},
                                                                 'revision': {'type': 'integer'}},
                                                  'required': ['architecture',
                                                               'channel',
                                                               'name',
                                                               'revision'],
                                                  'type': 'object'},
                     'DeployFromRepositoryResult': {'additionalProperties': False,
                                                    'properties': {'Errors': {'items': {'$ref': '#/definitions/Error'},
                                                                              'type': 'array'},
                                                                   'Info': {'$ref': '#/definitions/DeployFromRepositoryInfo'},
                                                                   'PendingResourceUploads': {'items': {'$ref': '#/definitions/PendingResourceUpload'},
                                                                                              'type': 'array'}},
                                                    'required': ['Errors',
                                                                 'Info',
                                                                 'PendingResourceUploads'],
                                                    'type': 'object'},
                     'DeployFromRepositoryResults': {'additionalProperties': False,
                                                     'properties': {'Results': {'items': {'$ref': '#/definitions/DeployFromRepositoryResult'},
                                                                                'type': 'array'}},
                                                     'required': ['Results'],
                                                     'type': 'object'},
                     'DestroyApplicationInfo': {'additionalProperties': False,
                                                'properties': {'destroyed-storage': {'items': {'$ref': '#/definitions/Entity'},
                                                                                     'type': 'array'},
                                                               'destroyed-units': {'items': {'$ref': '#/definitions/Entity'},
                                                                                   'type': 'array'},
                                                               'detached-storage': {'items': {'$ref': '#/definitions/Entity'},
                                                                                    'type': 'array'}},
                                                'type': 'object'},
                     'DestroyApplicationParams': {'additionalProperties': False,
                                                  'properties': {'application-tag': {'type': 'string'},
                                                                 'destroy-storage': {'type': 'boolean'},
                                                                 'dry-run': {'type': 'boolean'},
                                                                 'force': {'type': 'boolean'},
                                                                 'max-wait': {'type': 'integer'}},
                                                  'required': ['application-tag',
                                                               'force'],
                                                  'type': 'object'},
                     'DestroyApplicationResult': {'additionalProperties': False,
                                                  'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                 'info': {'$ref': '#/definitions/DestroyApplicationInfo'}},
                                                  'type': 'object'},
                     'DestroyApplicationResults': {'additionalProperties': False,
                                                   'properties': {'results': {'items': {'$ref': '#/definitions/DestroyApplicationResult'},
                                                                              'type': 'array'}},
                                                   'type': 'object'},
                     'DestroyApplicationsParams': {'additionalProperties': False,
                                                   'properties': {'applications': {'items': {'$ref': '#/definitions/DestroyApplicationParams'},
                                                                                   'type': 'array'}},
                                                   'required': ['applications'],
                                                   'type': 'object'},
                     'DestroyConsumedApplicationParams': {'additionalProperties': False,
                                                          'properties': {'application-tag': {'type': 'string'},
                                                                         'force': {'type': 'boolean'},
                                                                         'max-wait': {'type': 'integer'}},
                                                          'required': ['application-tag'],
                                                          'type': 'object'},
                     'DestroyConsumedApplicationsParams': {'additionalProperties': False,
                                                           'properties': {'applications': {'items': {'$ref': '#/definitions/DestroyConsumedApplicationParams'},
                                                                                           'type': 'array'}},
                                                           'required': ['applications'],
                                                           'type': 'object'},
                     'DestroyRelation': {'additionalProperties': False,
                                         'properties': {'endpoints': {'items': {'type': 'string'},
                                                                      'type': 'array'},
                                                        'force': {'type': 'boolean'},
                                                        'max-wait': {'type': 'integer'},
                                                        'relation-id': {'type': 'integer'}},
                                         'required': ['relation-id'],
                                         'type': 'object'},
                     'DestroyUnitInfo': {'additionalProperties': False,
                                         'properties': {'destroyed-storage': {'items': {'$ref': '#/definitions/Entity'},
                                                                              'type': 'array'},
                                                        'detached-storage': {'items': {'$ref': '#/definitions/Entity'},
                                                                             'type': 'array'}},
                                         'type': 'object'},
                     'DestroyUnitParams': {'additionalProperties': False,
                                           'properties': {'destroy-storage': {'type': 'boolean'},
                                                          'dry-run': {'type': 'boolean'},
                                                          'force': {'type': 'boolean'},
                                                          'max-wait': {'type': 'integer'},
                                                          'unit-tag': {'type': 'string'}},
                                           'required': ['unit-tag'],
                                           'type': 'object'},
                     'DestroyUnitResult': {'additionalProperties': False,
                                           'properties': {'error': {'$ref': '#/definitions/Error'},
                                                          'info': {'$ref': '#/definitions/DestroyUnitInfo'}},
                                           'type': 'object'},
                     'DestroyUnitResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/DestroyUnitResult'},
                                                                       'type': 'array'}},
                                            'type': 'object'},
                     'DestroyUnitsParams': {'additionalProperties': False,
                                            'properties': {'units': {'items': {'$ref': '#/definitions/DestroyUnitParams'},
                                                                     'type': 'array'}},
                                            'required': ['units'],
                                            'type': 'object'},
                     'EndpointRelationData': {'additionalProperties': False,
                                              'properties': {'ApplicationData': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                              'type': 'object'}},
                                                                                 'type': 'object'},
                                                             'cross-model': {'type': 'boolean'},
                                                             'endpoint': {'type': 'string'},
                                                             'related-endpoint': {'type': 'string'},
                                                             'relation-id': {'type': 'integer'},
                                                             'unit-relation-data': {'patternProperties': {'.*': {'$ref': '#/definitions/RelationData'}},
                                                                                    'type': 'object'}},
                                              'required': ['relation-id',
                                                           'endpoint',
                                                           'cross-model',
                                                           'related-endpoint',
                                                           'ApplicationData',
                                                           'unit-relation-data'],
                                              'type': 'object'},
                     'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                    'type': 'object'}},
                                                       'type': 'object'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'ExposedEndpoint': {'additionalProperties': False,
                                         'properties': {'expose-to-cidrs': {'items': {'type': 'string'},
                                                                            'type': 'array'},
                                                        'expose-to-spaces': {'items': {'type': 'string'},
                                                                             'type': 'array'}},
                                         'type': 'object'},
                     'ExternalControllerInfo': {'additionalProperties': False,
                                                'properties': {'addrs': {'items': {'type': 'string'},
                                                                         'type': 'array'},
                                                               'ca-cert': {'type': 'string'},
                                                               'controller-alias': {'type': 'string'},
                                                               'controller-tag': {'type': 'string'}},
                                                'required': ['controller-tag',
                                                             'controller-alias',
                                                             'addrs',
                                                             'ca-cert'],
                                                'type': 'object'},
                     'Macaroon': {'additionalProperties': False, 'type': 'object'},
                     'OfferUserDetails': {'additionalProperties': False,
                                          'properties': {'access': {'type': 'string'},
                                                         'display-name': {'type': 'string'},
                                                         'user': {'type': 'string'}},
                                          'required': ['user',
                                                       'display-name',
                                                       'access'],
                                          'type': 'object'},
                     'PendingResourceUpload': {'additionalProperties': False,
                                               'properties': {'Filename': {'type': 'string'},
                                                              'Name': {'type': 'string'},
                                                              'Type': {'type': 'string'},
                                                              'pending-id': {'type': 'string'}},
                                               'required': ['Name',
                                                            'Filename',
                                                            'pending-id',
                                                            'Type'],
                                               'type': 'object'},
                     'Placement': {'additionalProperties': False,
                                   'properties': {'directive': {'type': 'string'},
                                                  'scope': {'type': 'string'}},
                                   'required': ['scope', 'directive'],
                                   'type': 'object'},
                     'RelationData': {'additionalProperties': False,
                                      'properties': {'InScope': {'type': 'boolean'},
                                                     'UnitData': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                               'type': 'object'}},
                                                                  'type': 'object'}},
                                      'required': ['InScope', 'UnitData'],
                                      'type': 'object'},
                     'RelationSuspendedArg': {'additionalProperties': False,
                                              'properties': {'message': {'type': 'string'},
                                                             'relation-id': {'type': 'integer'},
                                                             'suspended': {'type': 'boolean'}},
                                              'required': ['relation-id',
                                                           'message',
                                                           'suspended'],
                                              'type': 'object'},
                     'RelationSuspendedArgs': {'additionalProperties': False,
                                               'properties': {'args': {'items': {'$ref': '#/definitions/RelationSuspendedArg'},
                                                                       'type': 'array'}},
                                               'required': ['args'],
                                               'type': 'object'},
                     'RemoteEndpoint': {'additionalProperties': False,
                                        'properties': {'interface': {'type': 'string'},
                                                       'limit': {'type': 'integer'},
                                                       'name': {'type': 'string'},
                                                       'role': {'type': 'string'}},
                                        'required': ['name',
                                                     'role',
                                                     'interface',
                                                     'limit'],
                                        'type': 'object'},
                     'RemoteSpace': {'additionalProperties': False,
                                     'properties': {'cloud-type': {'type': 'string'},
                                                    'name': {'type': 'string'},
                                                    'provider-attributes': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                         'type': 'object'}},
                                                                            'type': 'object'},
                                                    'provider-id': {'type': 'string'},
                                                    'subnets': {'items': {'$ref': '#/definitions/Subnet'},
                                                                'type': 'array'}},
                                     'required': ['cloud-type',
                                                  'name',
                                                  'provider-id',
                                                  'provider-attributes',
                                                  'subnets'],
                                     'type': 'object'},
                     'ScaleApplicationInfo': {'additionalProperties': False,
                                              'properties': {'num-units': {'type': 'integer'}},
                                              'required': ['num-units'],
                                              'type': 'object'},
                     'ScaleApplicationParams': {'additionalProperties': False,
                                                'properties': {'application-tag': {'type': 'string'},
                                                               'force': {'type': 'boolean'},
                                                               'scale': {'type': 'integer'},
                                                               'scale-change': {'type': 'integer'}},
                                                'required': ['application-tag',
                                                             'scale',
                                                             'force'],
                                                'type': 'object'},
                     'ScaleApplicationResult': {'additionalProperties': False,
                                                'properties': {'error': {'$ref': '#/definitions/Error'},
                                                               'info': {'$ref': '#/definitions/ScaleApplicationInfo'}},
                                                'type': 'object'},
                     'ScaleApplicationResults': {'additionalProperties': False,
                                                 'properties': {'results': {'items': {'$ref': '#/definitions/ScaleApplicationResult'},
                                                                            'type': 'array'}},
                                                 'type': 'object'},
                     'ScaleApplicationsParams': {'additionalProperties': False,
                                                 'properties': {'applications': {'items': {'$ref': '#/definitions/ScaleApplicationParams'},
                                                                                 'type': 'array'}},
                                                 'required': ['applications'],
                                                 'type': 'object'},
                     'SetConstraints': {'additionalProperties': False,
                                        'properties': {'application': {'type': 'string'},
                                                       'constraints': {'$ref': '#/definitions/Value'}},
                                        'required': ['application', 'constraints'],
                                        'type': 'object'},
                     'StorageConstraints': {'additionalProperties': False,
                                            'properties': {'count': {'type': 'integer'},
                                                           'pool': {'type': 'string'},
                                                           'size': {'type': 'integer'}},
                                            'type': 'object'},
                     'StringResult': {'additionalProperties': False,
                                      'properties': {'error': {'$ref': '#/definitions/Error'},
                                                     'result': {'type': 'string'}},
                                      'required': ['result'],
                                      'type': 'object'},
                     'Subnet': {'additionalProperties': False,
                                'properties': {'cidr': {'type': 'string'},
                                               'life': {'type': 'string'},
                                               'provider-id': {'type': 'string'},
                                               'provider-network-id': {'type': 'string'},
                                               'provider-space-id': {'type': 'string'},
                                               'space-tag': {'type': 'string'},
                                               'status': {'type': 'string'},
                                               'vlan-tag': {'type': 'integer'},
                                               'zones': {'items': {'type': 'string'},
                                                         'type': 'array'}},
                                'required': ['cidr',
                                             'vlan-tag',
                                             'life',
                                             'space-tag',
                                             'zones'],
                                'type': 'object'},
                     'UnitInfoResult': {'additionalProperties': False,
                                        'properties': {'error': {'$ref': '#/definitions/Error'},
                                                       'result': {'$ref': '#/definitions/UnitResult'}},
                                        'type': 'object'},
                     'UnitInfoResults': {'additionalProperties': False,
                                         'properties': {'results': {'items': {'$ref': '#/definitions/UnitInfoResult'},
                                                                    'type': 'array'}},
                                         'required': ['results'],
                                         'type': 'object'},
                     'UnitResult': {'additionalProperties': False,
                                    'properties': {'address': {'type': 'string'},
                                                   'charm': {'type': 'string'},
                                                   'leader': {'type': 'boolean'},
                                                   'life': {'type': 'string'},
                                                   'machine': {'type': 'string'},
                                                   'opened-ports': {'items': {'type': 'string'},
                                                                    'type': 'array'},
                                                   'provider-id': {'type': 'string'},
                                                   'public-address': {'type': 'string'},
                                                   'relation-data': {'items': {'$ref': '#/definitions/EndpointRelationData'},
                                                                     'type': 'array'},
                                                   'tag': {'type': 'string'},
                                                   'workload-version': {'type': 'string'}},
                                    'required': ['tag',
                                                 'workload-version',
                                                 'opened-ports',
                                                 'charm'],
                                    'type': 'object'},
                     'UnitsResolved': {'additionalProperties': False,
                                       'properties': {'all': {'type': 'boolean'},
                                                      'retry': {'type': 'boolean'},
                                                      'tags': {'$ref': '#/definitions/Entities'}},
                                       'type': 'object'},
                     'UpdateChannelArg': {'additionalProperties': False,
                                          'properties': {'channel': {'type': 'string'},
                                                         'force': {'type': 'boolean'},
                                                         'tag': {'$ref': '#/definitions/Entity'}},
                                          'required': ['tag', 'force', 'channel'],
                                          'type': 'object'},
                     'UpdateChannelArgs': {'additionalProperties': False,
                                           'properties': {'args': {'items': {'$ref': '#/definitions/UpdateChannelArg'},
                                                                   'type': 'array'}},
                                           'required': ['args'],
                                           'type': 'object'},
                     'Value': {'additionalProperties': False,
                               'properties': {'allocate-public-ip': {'type': 'boolean'},
                                              'arch': {'type': 'string'},
                                              'container': {'type': 'string'},
                                              'cores': {'type': 'integer'},
                                              'cpu-power': {'type': 'integer'},
                                              'image-id': {'type': 'string'},
                                              'instance-role': {'type': 'string'},
                                              'instance-type': {'type': 'string'},
                                              'mem': {'type': 'integer'},
                                              'root-disk': {'type': 'integer'},
                                              'root-disk-source': {'type': 'string'},
                                              'spaces': {'items': {'type': 'string'},
                                                         'type': 'array'},
                                              'tags': {'items': {'type': 'string'},
                                                       'type': 'array'},
                                              'virt-type': {'type': 'string'},
                                              'zones': {'items': {'type': 'string'},
                                                        'type': 'array'}},
                               'type': 'object'}},
     'properties': {'AddRelation': {'description': 'AddRelation adds a relation '
                                                   'between the specified '
                                                   'endpoints and returns the '
                                                   'relation info.',
                                    'properties': {'Params': {'$ref': '#/definitions/AddRelation'},
                                                   'Result': {'$ref': '#/definitions/AddRelationResults'}},
                                    'type': 'object'},
                    'AddUnits': {'description': 'AddUnits adds a given number of '
                                                'units to an application.',
                                 'properties': {'Params': {'$ref': '#/definitions/AddApplicationUnits'},
                                                'Result': {'$ref': '#/definitions/AddApplicationUnitsResults'}},
                                 'type': 'object'},
                    'ApplicationsInfo': {'description': 'ApplicationsInfo returns '
                                                        'applications information.',
                                         'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                        'Result': {'$ref': '#/definitions/ApplicationInfoResults'}},
                                         'type': 'object'},
                    'CharmConfig': {'description': 'CharmConfig returns charm '
                                                   'config for the input list of '
                                                   'applications and\n'
                                                   'model generations.',
                                    'properties': {'Params': {'$ref': '#/definitions/ApplicationGetArgs'},
                                                   'Result': {'$ref': '#/definitions/ApplicationGetConfigResults'}},
                                    'type': 'object'},
                    'CharmRelations': {'description': 'CharmRelations implements '
                                                      'the server side of '
                                                      'Application.CharmRelations.',
                                       'properties': {'Params': {'$ref': '#/definitions/ApplicationCharmRelations'},
                                                      'Result': {'$ref': '#/definitions/ApplicationCharmRelationsResults'}},
                                       'type': 'object'},
                    'Consume': {'description': 'Consume adds remote applications '
                                               'to the model without creating any\n'
                                               'relations.',
                                'properties': {'Params': {'$ref': '#/definitions/ConsumeApplicationArgs'},
                                               'Result': {'$ref': '#/definitions/ErrorResults'}},
                                'type': 'object'},
                    'Deploy': {'description': 'Deploy fetches the charms from the '
                                              'charm store and deploys them\n'
                                              'using the specified placement '
                                              'directives.',
                               'properties': {'Params': {'$ref': '#/definitions/ApplicationsDeploy'},
                                              'Result': {'$ref': '#/definitions/ErrorResults'}},
                               'type': 'object'},
                    'DeployFromRepository': {'description': 'DeployFromRepository '
                                                            'is a one-stop '
                                                            'deployment method for '
                                                            'repository\n'
                                                            'charms. Only a charm '
                                                            'name is required to '
                                                            'deploy. If argument '
                                                            'validation\n'
                                                            'fails, a list of all '
                                                            'errors found in '
                                                            'validation will be '
                                                            'returned. If a\n'
                                                            'local resource is '
                                                            'provided, details '
                                                            'required for '
                                                            'uploading the '
                                                            'validated\n'
                                                            'resource will be '
                                                            'returned.',
                                             'properties': {'Params': {'$ref': '#/definitions/DeployFromRepositoryArgs'},
                                                            'Result': {'$ref': '#/definitions/DeployFromRepositoryResults'}},
                                             'type': 'object'},
                    'DestroyApplication': {'description': 'DestroyApplication '
                                                          'removes a given set of '
                                                          'applications.',
                                           'properties': {'Params': {'$ref': '#/definitions/DestroyApplicationsParams'},
                                                          'Result': {'$ref': '#/definitions/DestroyApplicationResults'}},
                                           'type': 'object'},
                    'DestroyConsumedApplications': {'description': 'DestroyConsumedApplications '
                                                                   'removes a '
                                                                   'given set of '
                                                                   'consumed '
                                                                   '(remote) '
                                                                   'applications.',
                                                    'properties': {'Params': {'$ref': '#/definitions/DestroyConsumedApplicationsParams'},
                                                                   'Result': {'$ref': '#/definitions/ErrorResults'}},
                                                    'type': 'object'},
                    'DestroyRelation': {'description': 'DestroyRelation removes '
                                                       'the relation between the\n'
                                                       'specified endpoints or an '
                                                       'id.',
                                        'properties': {'Params': {'$ref': '#/definitions/DestroyRelation'}},
                                        'type': 'object'},
                    'DestroyUnit': {'description': 'DestroyUnit removes a given '
                                                   'set of application units.',
                                    'properties': {'Params': {'$ref': '#/definitions/DestroyUnitsParams'},
                                                   'Result': {'$ref': '#/definitions/DestroyUnitResults'}},
                                    'type': 'object'},
                    'Expose': {'description': 'Expose changes the juju-managed '
                                              'firewall to expose any ports that\n'
                                              'were also explicitly marked by '
                                              'units as open.',
                               'properties': {'Params': {'$ref': '#/definitions/ApplicationExpose'}},
                               'type': 'object'},
                    'Get': {'description': 'Get returns the charm configuration '
                                           'for an application.',
                            'properties': {'Params': {'$ref': '#/definitions/ApplicationGet'},
                                           'Result': {'$ref': '#/definitions/ApplicationGetResults'}},
                            'type': 'object'},
                    'GetCharmURLOrigin': {'description': 'GetCharmURLOrigin '
                                                         'returns the charm URL '
                                                         'and charm origin the '
                                                         'given\n'
                                                         'application is running '
                                                         'at present.',
                                          'properties': {'Params': {'$ref': '#/definitions/ApplicationGet'},
                                                         'Result': {'$ref': '#/definitions/CharmURLOriginResult'}},
                                          'type': 'object'},
                    'GetConfig': {'description': 'GetConfig returns the charm '
                                                 'config for each of the input '
                                                 'applications.',
                                  'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                 'Result': {'$ref': '#/definitions/ApplicationGetConfigResults'}},
                                  'type': 'object'},
                    'GetConstraints': {'description': 'GetConstraints returns the '
                                                      'constraints for a given '
                                                      'application.',
                                       'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                      'Result': {'$ref': '#/definitions/ApplicationGetConstraintsResults'}},
                                       'type': 'object'},
                    'Leader': {'description': 'Leader returns the unit name of the '
                                              'leader for the given application.',
                               'properties': {'Params': {'$ref': '#/definitions/Entity'},
                                              'Result': {'$ref': '#/definitions/StringResult'}},
                               'type': 'object'},
                    'MergeBindings': {'description': 'MergeBindings merges '
                                                     'operator-defined bindings '
                                                     'with the current bindings '
                                                     'for\n'
                                                     'one or more applications.',
                                      'properties': {'Params': {'$ref': '#/definitions/ApplicationMergeBindingsArgs'},
                                                     'Result': {'$ref': '#/definitions/ErrorResults'}},
                                      'type': 'object'},
                    'ResolveUnitErrors': {'description': 'ResolveUnitErrors marks '
                                                         'errors on the specified '
                                                         'units as resolved.',
                                          'properties': {'Params': {'$ref': '#/definitions/UnitsResolved'},
                                                         'Result': {'$ref': '#/definitions/ErrorResults'}},
                                          'type': 'object'},
                    'ScaleApplications': {'description': 'ScaleApplications scales '
                                                         'the specified '
                                                         'application to the '
                                                         'requested number of '
                                                         'units.',
                                          'properties': {'Params': {'$ref': '#/definitions/ScaleApplicationsParams'},
                                                         'Result': {'$ref': '#/definitions/ScaleApplicationResults'}},
                                          'type': 'object'},
                    'SetCharm': {'description': 'SetCharm sets the charm for a '
                                                'given for the application.',
                                 'properties': {'Params': {'$ref': '#/definitions/ApplicationSetCharm'}},
                                 'type': 'object'},
                    'SetConfigs': {'description': 'SetConfigs implements the '
                                                  'server side of '
                                                  'Application.SetConfig.  Both\n'
                                                  'application and charm config '
                                                  'are set. It does not unset '
                                                  'values in\n'
                                                  'Config map that are set to an '
                                                  'empty string. Unset should be '
                                                  'used for that.',
                                   'properties': {'Params': {'$ref': '#/definitions/ConfigSetArgs'},
                                                  'Result': {'$ref': '#/definitions/ErrorResults'}},
                                   'type': 'object'},
                    'SetConstraints': {'description': 'SetConstraints sets the '
                                                      'constraints for a given '
                                                      'application.',
                                       'properties': {'Params': {'$ref': '#/definitions/SetConstraints'}},
                                       'type': 'object'},
                    'SetMetricCredentials': {'description': 'SetMetricCredentials '
                                                            'sets credentials on '
                                                            'the application.',
                                             'properties': {'Params': {'$ref': '#/definitions/ApplicationMetricCredentials'},
                                                            'Result': {'$ref': '#/definitions/ErrorResults'}},
                                             'type': 'object'},
                    'SetRelationsSuspended': {'description': 'SetRelationsSuspended '
                                                             'sets the suspended '
                                                             'status of the '
                                                             'specified relations.',
                                              'properties': {'Params': {'$ref': '#/definitions/RelationSuspendedArgs'},
                                                             'Result': {'$ref': '#/definitions/ErrorResults'}},
                                              'type': 'object'},
                    'Unexpose': {'description': 'Unexpose changes the juju-managed '
                                                'firewall to unexpose any ports '
                                                'that\n'
                                                'were also explicitly marked by '
                                                'units as open.',
                                 'properties': {'Params': {'$ref': '#/definitions/ApplicationUnexpose'}},
                                 'type': 'object'},
                    'UnitsInfo': {'description': 'UnitsInfo returns unit '
                                                 'information for the given '
                                                 'entities (units or\n'
                                                 'applications).',
                                  'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                 'Result': {'$ref': '#/definitions/UnitInfoResults'}},
                                  'type': 'object'},
                    'UnsetApplicationsConfig': {'description': 'UnsetApplicationsConfig '
                                                               'implements the '
                                                               'server side of '
                                                               'Application.UnsetApplicationsConfig.',
                                                'properties': {'Params': {'$ref': '#/definitions/ApplicationConfigUnsetArgs'},
                                                               'Result': {'$ref': '#/definitions/ErrorResults'}},
                                                'type': 'object'},
                    'UpdateApplicationBase': {'description': 'UpdateApplicationBase '
                                                             'updates the '
                                                             'application base.\n'
                                                             'Base for '
                                                             'subordinates is '
                                                             'updated too.',
                                              'properties': {'Params': {'$ref': '#/definitions/UpdateChannelArgs'},
                                                             'Result': {'$ref': '#/definitions/ErrorResults'}},
                                              'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(AddRelationResults)
    async def AddRelation(self, endpoints=None, via_cidrs=None):
        '''
        AddRelation adds a relation between the specified endpoints and returns the relation info.

        endpoints : typing.Sequence[str]
        via_cidrs : typing.Sequence[str]
        Returns -> AddRelationResults
        '''
        if endpoints is not None and not isinstance(endpoints, (bytes, str, list)):
            raise Exception("Expected endpoints to be a Sequence, received: {}".format(type(endpoints)))

        if via_cidrs is not None and not isinstance(via_cidrs, (bytes, str, list)):
            raise Exception("Expected via_cidrs to be a Sequence, received: {}".format(type(via_cidrs)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='AddRelation',
                   version=18,
                   params=_params)
        _params['endpoints'] = endpoints
        _params['via-cidrs'] = via_cidrs
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(AddApplicationUnitsResults)
    async def AddUnits(self, application=None, attach_storage=None, num_units=None, placement=None, policy=None):
        '''
        AddUnits adds a given number of units to an application.

        application : str
        attach_storage : typing.Sequence[str]
        num_units : int
        placement : typing.Sequence[~Placement]
        policy : str
        Returns -> AddApplicationUnitsResults
        '''
        if application is not None and not isinstance(application, (bytes, str)):
            raise Exception("Expected application to be a str, received: {}".format(type(application)))

        if attach_storage is not None and not isinstance(attach_storage, (bytes, str, list)):
            raise Exception("Expected attach_storage to be a Sequence, received: {}".format(type(attach_storage)))

        if num_units is not None and not isinstance(num_units, int):
            raise Exception("Expected num_units to be a int, received: {}".format(type(num_units)))

        if placement is not None and not isinstance(placement, (bytes, str, list)):
            raise Exception("Expected placement to be a Sequence, received: {}".format(type(placement)))

        if policy is not None and not isinstance(policy, (bytes, str)):
            raise Exception("Expected policy to be a str, received: {}".format(type(policy)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='AddUnits',
                   version=18,
                   params=_params)
        _params['application'] = application
        _params['attach-storage'] = attach_storage
        _params['num-units'] = num_units
        _params['placement'] = placement
        _params['policy'] = policy
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ApplicationInfoResults)
    async def ApplicationsInfo(self, entities=None):
        '''
        ApplicationsInfo returns applications information.

        entities : typing.Sequence[~Entity]
        Returns -> ApplicationInfoResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='ApplicationsInfo',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ApplicationGetConfigResults)
    async def CharmConfig(self, args=None):
        '''
        CharmConfig returns charm config for the input list of applications and
        model generations.

        args : typing.Sequence[~ApplicationGet]
        Returns -> ApplicationGetConfigResults
        '''
        if args is not None and not isinstance(args, (bytes, str, list)):
            raise Exception("Expected args to be a Sequence, received: {}".format(type(args)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='CharmConfig',
                   version=18,
                   params=_params)
        _params['args'] = args
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ApplicationCharmRelationsResults)
    async def CharmRelations(self, application=None):
        '''
        CharmRelations implements the server side of Application.CharmRelations.

        application : str
        Returns -> ApplicationCharmRelationsResults
        '''
        if application is not None and not isinstance(application, (bytes, str)):
            raise Exception("Expected application to be a str, received: {}".format(type(application)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='CharmRelations',
                   version=18,
                   params=_params)
        _params['application'] = application
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def Consume(self, args=None):
        '''
        Consume adds remote applications to the model without creating any
        relations.

        args : typing.Sequence[~ConsumeApplicationArg]
        Returns -> ErrorResults
        '''
        if args is not None and not isinstance(args, (bytes, str, list)):
            raise Exception("Expected args to be a Sequence, received: {}".format(type(args)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='Consume',
                   version=18,
                   params=_params)
        _params['args'] = args
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def Deploy(self, applications=None):
        '''
        Deploy fetches the charms from the charm store and deploys them
        using the specified placement directives.

        applications : typing.Sequence[~ApplicationDeploy]
        Returns -> ErrorResults
        '''
        if applications is not None and not isinstance(applications, (bytes, str, list)):
            raise Exception("Expected applications to be a Sequence, received: {}".format(type(applications)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='Deploy',
                   version=18,
                   params=_params)
        _params['applications'] = applications
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(DeployFromRepositoryResults)
    async def DeployFromRepository(self, args=None):
        '''
        DeployFromRepository is a one-stop deployment method for repository
        charms. Only a charm name is required to deploy. If argument validation
        fails, a list of all errors found in validation will be returned. If a
        local resource is provided, details required for uploading the validated
        resource will be returned.

        args : typing.Sequence[~DeployFromRepositoryArg]
        Returns -> DeployFromRepositoryResults
        '''
        if args is not None and not isinstance(args, (bytes, str, list)):
            raise Exception("Expected args to be a Sequence, received: {}".format(type(args)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='DeployFromRepository',
                   version=18,
                   params=_params)
        _params['Args'] = args
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(DestroyApplicationResults)
    async def DestroyApplication(self, applications=None):
        '''
        DestroyApplication removes a given set of applications.

        applications : typing.Sequence[~DestroyApplicationParams]
        Returns -> DestroyApplicationResults
        '''
        if applications is not None and not isinstance(applications, (bytes, str, list)):
            raise Exception("Expected applications to be a Sequence, received: {}".format(type(applications)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='DestroyApplication',
                   version=18,
                   params=_params)
        _params['applications'] = applications
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def DestroyConsumedApplications(self, applications=None):
        '''
        DestroyConsumedApplications removes a given set of consumed (remote) applications.

        applications : typing.Sequence[~DestroyConsumedApplicationParams]
        Returns -> ErrorResults
        '''
        if applications is not None and not isinstance(applications, (bytes, str, list)):
            raise Exception("Expected applications to be a Sequence, received: {}".format(type(applications)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='DestroyConsumedApplications',
                   version=18,
                   params=_params)
        _params['applications'] = applications
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def DestroyRelation(self, endpoints=None, force=None, max_wait=None, relation_id=None):
        '''
        DestroyRelation removes the relation between the
        specified endpoints or an id.

        endpoints : typing.Sequence[str]
        force : bool
        max_wait : int
        relation_id : int
        Returns -> None
        '''
        if endpoints is not None and not isinstance(endpoints, (bytes, str, list)):
            raise Exception("Expected endpoints to be a Sequence, received: {}".format(type(endpoints)))

        if force is not None and not isinstance(force, bool):
            raise Exception("Expected force to be a bool, received: {}".format(type(force)))

        if max_wait is not None and not isinstance(max_wait, int):
            raise Exception("Expected max_wait to be a int, received: {}".format(type(max_wait)))

        if relation_id is not None and not isinstance(relation_id, int):
            raise Exception("Expected relation_id to be a int, received: {}".format(type(relation_id)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='DestroyRelation',
                   version=18,
                   params=_params)
        _params['endpoints'] = endpoints
        _params['force'] = force
        _params['max-wait'] = max_wait
        _params['relation-id'] = relation_id
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(DestroyUnitResults)
    async def DestroyUnit(self, units=None):
        '''
        DestroyUnit removes a given set of application units.

        units : typing.Sequence[~DestroyUnitParams]
        Returns -> DestroyUnitResults
        '''
        if units is not None and not isinstance(units, (bytes, str, list)):
            raise Exception("Expected units to be a Sequence, received: {}".format(type(units)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='DestroyUnit',
                   version=18,
                   params=_params)
        _params['units'] = units
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Expose(self, application=None, exposed_endpoints=None):
        '''
        Expose changes the juju-managed firewall to expose any ports that
        were also explicitly marked by units as open.

        application : str
        exposed_endpoints : typing.Mapping[str, ~ExposedEndpoint]
        Returns -> None
        '''
        if application is not None and not isinstance(application, (bytes, str)):
            raise Exception("Expected application to be a str, received: {}".format(type(application)))

        if exposed_endpoints is not None and not isinstance(exposed_endpoints, dict):
            raise Exception("Expected exposed_endpoints to be a Mapping, received: {}".format(type(exposed_endpoints)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='Expose',
                   version=18,
                   params=_params)
        _params['application'] = application
        _params['exposed-endpoints'] = exposed_endpoints
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ApplicationGetResults)
    async def Get(self, application=None, branch=None):
        '''
        Get returns the charm configuration for an application.

        application : str
        branch : str
        Returns -> ApplicationGetResults
        '''
        if application is not None and not isinstance(application, (bytes, str)):
            raise Exception("Expected application to be a str, received: {}".format(type(application)))

        if branch is not None and not isinstance(branch, (bytes, str)):
            raise Exception("Expected branch to be a str, received: {}".format(type(branch)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='Get',
                   version=18,
                   params=_params)
        _params['application'] = application
        _params['branch'] = branch
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(CharmURLOriginResult)
    async def GetCharmURLOrigin(self, application=None, branch=None):
        '''
        GetCharmURLOrigin returns the charm URL and charm origin the given
        application is running at present.

        application : str
        branch : str
        Returns -> CharmURLOriginResult
        '''
        if application is not None and not isinstance(application, (bytes, str)):
            raise Exception("Expected application to be a str, received: {}".format(type(application)))

        if branch is not None and not isinstance(branch, (bytes, str)):
            raise Exception("Expected branch to be a str, received: {}".format(type(branch)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='GetCharmURLOrigin',
                   version=18,
                   params=_params)
        _params['application'] = application
        _params['branch'] = branch
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ApplicationGetConfigResults)
    async def GetConfig(self, entities=None):
        '''
        GetConfig returns the charm config for each of the input applications.

        entities : typing.Sequence[~Entity]
        Returns -> ApplicationGetConfigResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='GetConfig',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ApplicationGetConstraintsResults)
    async def GetConstraints(self, entities=None):
        '''
        GetConstraints returns the constraints for a given application.

        entities : typing.Sequence[~Entity]
        Returns -> ApplicationGetConstraintsResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='GetConstraints',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResult)
    async def Leader(self, tag=None):
        '''
        Leader returns the unit name of the leader for the given application.

        tag : str
        Returns -> StringResult
        '''
        if tag is not None and not isinstance(tag, (bytes, str)):
            raise Exception("Expected tag to be a str, received: {}".format(type(tag)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='Leader',
                   version=18,
                   params=_params)
        _params['tag'] = tag
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def MergeBindings(self, args=None):
        '''
        MergeBindings merges operator-defined bindings with the current bindings for
        one or more applications.

        args : typing.Sequence[~ApplicationMergeBindings]
        Returns -> ErrorResults
        '''
        if args is not None and not isinstance(args, (bytes, str, list)):
            raise Exception("Expected args to be a Sequence, received: {}".format(type(args)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='MergeBindings',
                   version=18,
                   params=_params)
        _params['args'] = args
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def ResolveUnitErrors(self, all_=None, retry=None, tags=None):
        '''
        ResolveUnitErrors marks errors on the specified units as resolved.

        all_ : bool
        retry : bool
        tags : Entities
        Returns -> ErrorResults
        '''
        if all_ is not None and not isinstance(all_, bool):
            raise Exception("Expected all_ to be a bool, received: {}".format(type(all_)))

        if retry is not None and not isinstance(retry, bool):
            raise Exception("Expected retry to be a bool, received: {}".format(type(retry)))

        if tags is not None and not isinstance(tags, (dict, Entities)):
            raise Exception("Expected tags to be a Entities, received: {}".format(type(tags)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='ResolveUnitErrors',
                   version=18,
                   params=_params)
        _params['all'] = all_
        _params['retry'] = retry
        _params['tags'] = tags
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ScaleApplicationResults)
    async def ScaleApplications(self, applications=None):
        '''
        ScaleApplications scales the specified application to the requested number of units.

        applications : typing.Sequence[~ScaleApplicationParams]
        Returns -> ScaleApplicationResults
        '''
        if applications is not None and not isinstance(applications, (bytes, str, list)):
            raise Exception("Expected applications to be a Sequence, received: {}".format(type(applications)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='ScaleApplications',
                   version=18,
                   params=_params)
        _params['applications'] = applications
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def SetCharm(self, application=None, channel=None, charm_origin=None, charm_url=None, config_settings=None, config_settings_yaml=None, endpoint_bindings=None, force=None, force_base=None, force_units=None, generation=None, resource_ids=None, storage_constraints=None):
        '''
        SetCharm sets the charm for a given for the application.

        application : str
        channel : str
        charm_origin : CharmOrigin
        charm_url : str
        config_settings : typing.Mapping[str, str]
        config_settings_yaml : str
        endpoint_bindings : typing.Mapping[str, str]
        force : bool
        force_base : bool
        force_units : bool
        generation : str
        resource_ids : typing.Mapping[str, str]
        storage_constraints : typing.Mapping[str, ~StorageConstraints]
        Returns -> None
        '''
        if application is not None and not isinstance(application, (bytes, str)):
            raise Exception("Expected application to be a str, received: {}".format(type(application)))

        if channel is not None and not isinstance(channel, (bytes, str)):
            raise Exception("Expected channel to be a str, received: {}".format(type(channel)))

        if charm_origin is not None and not isinstance(charm_origin, (dict, CharmOrigin)):
            raise Exception("Expected charm_origin to be a CharmOrigin, received: {}".format(type(charm_origin)))

        if charm_url is not None and not isinstance(charm_url, (bytes, str)):
            raise Exception("Expected charm_url to be a str, received: {}".format(type(charm_url)))

        if config_settings is not None and not isinstance(config_settings, dict):
            raise Exception("Expected config_settings to be a Mapping, received: {}".format(type(config_settings)))

        if config_settings_yaml is not None and not isinstance(config_settings_yaml, (bytes, str)):
            raise Exception("Expected config_settings_yaml to be a str, received: {}".format(type(config_settings_yaml)))

        if endpoint_bindings is not None and not isinstance(endpoint_bindings, dict):
            raise Exception("Expected endpoint_bindings to be a Mapping, received: {}".format(type(endpoint_bindings)))

        if force is not None and not isinstance(force, bool):
            raise Exception("Expected force to be a bool, received: {}".format(type(force)))

        if force_base is not None and not isinstance(force_base, bool):
            raise Exception("Expected force_base to be a bool, received: {}".format(type(force_base)))

        if force_units is not None and not isinstance(force_units, bool):
            raise Exception("Expected force_units to be a bool, received: {}".format(type(force_units)))

        if generation is not None and not isinstance(generation, (bytes, str)):
            raise Exception("Expected generation to be a str, received: {}".format(type(generation)))

        if resource_ids is not None and not isinstance(resource_ids, dict):
            raise Exception("Expected resource_ids to be a Mapping, received: {}".format(type(resource_ids)))

        if storage_constraints is not None and not isinstance(storage_constraints, dict):
            raise Exception("Expected storage_constraints to be a Mapping, received: {}".format(type(storage_constraints)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='SetCharm',
                   version=18,
                   params=_params)
        _params['application'] = application
        _params['channel'] = channel
        _params['charm-origin'] = charm_origin
        _params['charm-url'] = charm_url
        _params['config-settings'] = config_settings
        _params['config-settings-yaml'] = config_settings_yaml
        _params['endpoint-bindings'] = endpoint_bindings
        _params['force'] = force
        _params['force-base'] = force_base
        _params['force-units'] = force_units
        _params['generation'] = generation
        _params['resource-ids'] = resource_ids
        _params['storage-constraints'] = storage_constraints
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetConfigs(self, args=None):
        '''
        SetConfigs implements the server side of Application.SetConfig.  Both
        application and charm config are set. It does not unset values in
        Config map that are set to an empty string. Unset should be used for that.

        args : typing.Sequence[~ConfigSet]
        Returns -> ErrorResults
        '''
        if args is not None and not isinstance(args, (bytes, str, list)):
            raise Exception("Expected args to be a Sequence, received: {}".format(type(args)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='SetConfigs',
                   version=18,
                   params=_params)
        _params['Args'] = args
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def SetConstraints(self, application=None, constraints=None):
        '''
        SetConstraints sets the constraints for a given application.

        application : str
        constraints : Value
        Returns -> None
        '''
        if application is not None and not isinstance(application, (bytes, str)):
            raise Exception("Expected application to be a str, received: {}".format(type(application)))

        if constraints is not None and not isinstance(constraints, (dict, Value)):
            raise Exception("Expected constraints to be a Value, received: {}".format(type(constraints)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='SetConstraints',
                   version=18,
                   params=_params)
        _params['application'] = application
        _params['constraints'] = constraints
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetMetricCredentials(self, creds=None):
        '''
        SetMetricCredentials sets credentials on the application.

        creds : typing.Sequence[~ApplicationMetricCredential]
        Returns -> ErrorResults
        '''
        if creds is not None and not isinstance(creds, (bytes, str, list)):
            raise Exception("Expected creds to be a Sequence, received: {}".format(type(creds)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='SetMetricCredentials',
                   version=18,
                   params=_params)
        _params['creds'] = creds
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetRelationsSuspended(self, args=None):
        '''
        SetRelationsSuspended sets the suspended status of the specified relations.

        args : typing.Sequence[~RelationSuspendedArg]
        Returns -> ErrorResults
        '''
        if args is not None and not isinstance(args, (bytes, str, list)):
            raise Exception("Expected args to be a Sequence, received: {}".format(type(args)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='SetRelationsSuspended',
                   version=18,
                   params=_params)
        _params['args'] = args
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(None)
    async def Unexpose(self, application=None, exposed_endpoints=None):
        '''
        Unexpose changes the juju-managed firewall to unexpose any ports that
        were also explicitly marked by units as open.

        application : str
        exposed_endpoints : typing.Sequence[str]
        Returns -> None
        '''
        if application is not None and not isinstance(application, (bytes, str)):
            raise Exception("Expected application to be a str, received: {}".format(type(application)))

        if exposed_endpoints is not None and not isinstance(exposed_endpoints, (bytes, str, list)):
            raise Exception("Expected exposed_endpoints to be a Sequence, received: {}".format(type(exposed_endpoints)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='Unexpose',
                   version=18,
                   params=_params)
        _params['application'] = application
        _params['exposed-endpoints'] = exposed_endpoints
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(UnitInfoResults)
    async def UnitsInfo(self, entities=None):
        '''
        UnitsInfo returns unit information for the given entities (units or
        applications).

        entities : typing.Sequence[~Entity]
        Returns -> UnitInfoResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='UnitsInfo',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def UnsetApplicationsConfig(self, args=None):
        '''
        UnsetApplicationsConfig implements the server side of Application.UnsetApplicationsConfig.

        args : typing.Sequence[~ApplicationUnset]
        Returns -> ErrorResults
        '''
        if args is not None and not isinstance(args, (bytes, str, list)):
            raise Exception("Expected args to be a Sequence, received: {}".format(type(args)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='UnsetApplicationsConfig',
                   version=18,
                   params=_params)
        _params['Args'] = args
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def UpdateApplicationBase(self, args=None):
        '''
        UpdateApplicationBase updates the application base.
        Base for subordinates is updated too.

        args : typing.Sequence[~UpdateChannelArg]
        Returns -> ErrorResults
        '''
        if args is not None and not isinstance(args, (bytes, str, list)):
            raise Exception("Expected args to be a Sequence, received: {}".format(type(args)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Application',
                   request='UpdateApplicationBase',
                   version=18,
                   params=_params)
        _params['args'] = args
        reply = await self.rpc(msg)
        return reply



class UniterFacade(Type):
    name = 'Uniter'
    version = 18
    schema =     {'definitions': {'APIHostPortsResult': {'additionalProperties': False,
                                            'properties': {'servers': {'items': {'items': {'$ref': '#/definitions/HostPort'},
                                                                                 'type': 'array'},
                                                                       'type': 'array'}},
                                            'required': ['servers'],
                                            'type': 'object'},
                     'Action': {'additionalProperties': False,
                                'properties': {'execution-group': {'type': 'string'},
                                               'name': {'type': 'string'},
                                               'parallel': {'type': 'boolean'},
                                               'parameters': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                           'type': 'object'}},
                                                              'type': 'object'},
                                               'receiver': {'type': 'string'},
                                               'tag': {'type': 'string'}},
                                'required': ['tag', 'receiver', 'name'],
                                'type': 'object'},
                     'ActionExecutionResult': {'additionalProperties': False,
                                               'properties': {'action-tag': {'type': 'string'},
                                                              'message': {'type': 'string'},
                                                              'results': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                       'type': 'object'}},
                                                                          'type': 'object'},
                                                              'status': {'type': 'string'}},
                                               'required': ['action-tag', 'status'],
                                               'type': 'object'},
                     'ActionExecutionResults': {'additionalProperties': False,
                                                'properties': {'results': {'items': {'$ref': '#/definitions/ActionExecutionResult'},
                                                                           'type': 'array'}},
                                                'type': 'object'},
                     'ActionMessage': {'additionalProperties': False,
                                       'properties': {'message': {'type': 'string'},
                                                      'timestamp': {'format': 'date-time',
                                                                    'type': 'string'}},
                                       'required': ['timestamp', 'message'],
                                       'type': 'object'},
                     'ActionMessageParams': {'additionalProperties': False,
                                             'properties': {'messages': {'items': {'$ref': '#/definitions/EntityString'},
                                                                         'type': 'array'}},
                                             'required': ['messages'],
                                             'type': 'object'},
                     'ActionResult': {'additionalProperties': False,
                                      'properties': {'action': {'$ref': '#/definitions/Action'},
                                                     'completed': {'format': 'date-time',
                                                                   'type': 'string'},
                                                     'enqueued': {'format': 'date-time',
                                                                  'type': 'string'},
                                                     'error': {'$ref': '#/definitions/Error'},
                                                     'log': {'items': {'$ref': '#/definitions/ActionMessage'},
                                                             'type': 'array'},
                                                     'message': {'type': 'string'},
                                                     'output': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                             'type': 'object'}},
                                                                'type': 'object'},
                                                     'started': {'format': 'date-time',
                                                                 'type': 'string'},
                                                     'status': {'type': 'string'}},
                                      'type': 'object'},
                     'ActionResults': {'additionalProperties': False,
                                       'properties': {'results': {'items': {'$ref': '#/definitions/ActionResult'},
                                                                  'type': 'array'}},
                                       'type': 'object'},
                     'Address': {'additionalProperties': False,
                                 'properties': {'cidr': {'type': 'string'},
                                                'config-type': {'type': 'string'},
                                                'is-secondary': {'type': 'boolean'},
                                                'scope': {'type': 'string'},
                                                'space-id': {'type': 'string'},
                                                'space-name': {'type': 'string'},
                                                'type': {'type': 'string'},
                                                'value': {'type': 'string'}},
                                 'required': ['value', 'type', 'scope'],
                                 'type': 'object'},
                     'ApplicationOpenedPorts': {'additionalProperties': False,
                                                'properties': {'endpoint': {'type': 'string'},
                                                               'port-ranges': {'items': {'$ref': '#/definitions/PortRange'},
                                                                               'type': 'array'}},
                                                'required': ['endpoint',
                                                             'port-ranges'],
                                                'type': 'object'},
                     'ApplicationOpenedPortsResult': {'additionalProperties': False,
                                                      'properties': {'application-port-ranges': {'items': {'$ref': '#/definitions/ApplicationOpenedPorts'},
                                                                                                 'type': 'array'},
                                                                     'error': {'$ref': '#/definitions/Error'}},
                                                      'required': ['application-port-ranges'],
                                                      'type': 'object'},
                     'ApplicationOpenedPortsResults': {'additionalProperties': False,
                                                       'properties': {'results': {'items': {'$ref': '#/definitions/ApplicationOpenedPortsResult'},
                                                                                  'type': 'array'}},
                                                       'required': ['results'],
                                                       'type': 'object'},
                     'ApplicationStatusResult': {'additionalProperties': False,
                                                 'properties': {'application': {'$ref': '#/definitions/StatusResult'},
                                                                'error': {'$ref': '#/definitions/Error'},
                                                                'units': {'patternProperties': {'.*': {'$ref': '#/definitions/StatusResult'}},
                                                                          'type': 'object'}},
                                                 'required': ['application',
                                                              'units'],
                                                 'type': 'object'},
                     'ApplicationStatusResults': {'additionalProperties': False,
                                                  'properties': {'results': {'items': {'$ref': '#/definitions/ApplicationStatusResult'},
                                                                             'type': 'array'}},
                                                  'required': ['results'],
                                                  'type': 'object'},
                     'BoolResult': {'additionalProperties': False,
                                    'properties': {'error': {'$ref': '#/definitions/Error'},
                                                   'result': {'type': 'boolean'}},
                                    'required': ['result'],
                                    'type': 'object'},
                     'BoolResults': {'additionalProperties': False,
                                     'properties': {'results': {'items': {'$ref': '#/definitions/BoolResult'},
                                                                'type': 'array'}},
                                     'required': ['results'],
                                     'type': 'object'},
                     'CharmRelation': {'additionalProperties': False,
                                       'properties': {'interface': {'type': 'string'},
                                                      'limit': {'type': 'integer'},
                                                      'name': {'type': 'string'},
                                                      'optional': {'type': 'boolean'},
                                                      'role': {'type': 'string'},
                                                      'scope': {'type': 'string'}},
                                       'required': ['name',
                                                    'role',
                                                    'interface',
                                                    'optional',
                                                    'limit',
                                                    'scope'],
                                       'type': 'object'},
                     'CharmURL': {'additionalProperties': False,
                                  'properties': {'url': {'type': 'string'}},
                                  'required': ['url'],
                                  'type': 'object'},
                     'CharmURLs': {'additionalProperties': False,
                                   'properties': {'urls': {'items': {'$ref': '#/definitions/CharmURL'},
                                                           'type': 'array'}},
                                   'required': ['urls'],
                                   'type': 'object'},
                     'CloudCredential': {'additionalProperties': False,
                                         'properties': {'attrs': {'patternProperties': {'.*': {'type': 'string'}},
                                                                  'type': 'object'},
                                                        'auth-type': {'type': 'string'},
                                                        'redacted': {'items': {'type': 'string'},
                                                                     'type': 'array'}},
                                         'required': ['auth-type'],
                                         'type': 'object'},
                     'CloudSpec': {'additionalProperties': False,
                                   'properties': {'cacertificates': {'items': {'type': 'string'},
                                                                     'type': 'array'},
                                                  'credential': {'$ref': '#/definitions/CloudCredential'},
                                                  'endpoint': {'type': 'string'},
                                                  'identity-endpoint': {'type': 'string'},
                                                  'is-controller-cloud': {'type': 'boolean'},
                                                  'name': {'type': 'string'},
                                                  'region': {'type': 'string'},
                                                  'skip-tls-verify': {'type': 'boolean'},
                                                  'storage-endpoint': {'type': 'string'},
                                                  'type': {'type': 'string'}},
                                   'required': ['type', 'name'],
                                   'type': 'object'},
                     'CloudSpecResult': {'additionalProperties': False,
                                         'properties': {'error': {'$ref': '#/definitions/Error'},
                                                        'result': {'$ref': '#/definitions/CloudSpec'}},
                                         'type': 'object'},
                     'CommitHookChangesArg': {'additionalProperties': False,
                                              'properties': {'add-storage': {'items': {'$ref': '#/definitions/StorageAddParams'},
                                                                             'type': 'array'},
                                                             'close-ports': {'items': {'$ref': '#/definitions/EntityPortRange'},
                                                                             'type': 'array'},
                                                             'open-ports': {'items': {'$ref': '#/definitions/EntityPortRange'},
                                                                            'type': 'array'},
                                                             'pod-spec': {'$ref': '#/definitions/PodSpec'},
                                                             'relation-unit-settings': {'items': {'$ref': '#/definitions/RelationUnitSettings'},
                                                                                        'type': 'array'},
                                                             'secret-creates': {'items': {'$ref': '#/definitions/CreateSecretArg'},
                                                                                'type': 'array'},
                                                             'secret-deletes': {'items': {'$ref': '#/definitions/DeleteSecretArg'},
                                                                                'type': 'array'},
                                                             'secret-grants': {'items': {'$ref': '#/definitions/GrantRevokeSecretArg'},
                                                                               'type': 'array'},
                                                             'secret-revokes': {'items': {'$ref': '#/definitions/GrantRevokeSecretArg'},
                                                                                'type': 'array'},
                                                             'secret-updates': {'items': {'$ref': '#/definitions/UpdateSecretArg'},
                                                                                'type': 'array'},
                                                             'set-raw-k8s-spec': {'$ref': '#/definitions/PodSpec'},
                                                             'tag': {'type': 'string'},
                                                             'unit-state': {'$ref': '#/definitions/SetUnitStateArg'},
                                                             'update-network-info': {'type': 'boolean'}},
                                              'required': ['tag',
                                                           'update-network-info'],
                                              'type': 'object'},
                     'CommitHookChangesArgs': {'additionalProperties': False,
                                               'properties': {'args': {'items': {'$ref': '#/definitions/CommitHookChangesArg'},
                                                                       'type': 'array'}},
                                               'required': ['args'],
                                               'type': 'object'},
                     'ConfigSettingsResult': {'additionalProperties': False,
                                              'properties': {'error': {'$ref': '#/definitions/Error'},
                                                             'settings': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                       'type': 'object'}},
                                                                          'type': 'object'}},
                                              'required': ['settings'],
                                              'type': 'object'},
                     'ConfigSettingsResults': {'additionalProperties': False,
                                               'properties': {'results': {'items': {'$ref': '#/definitions/ConfigSettingsResult'},
                                                                          'type': 'array'}},
                                               'required': ['results'],
                                               'type': 'object'},
                     'CreateSecretArg': {'additionalProperties': False,
                                         'properties': {'UpsertSecretArg': {'$ref': '#/definitions/UpsertSecretArg'},
                                                        'content': {'$ref': '#/definitions/SecretContentParams'},
                                                        'description': {'type': 'string'},
                                                        'expire-time': {'format': 'date-time',
                                                                        'type': 'string'},
                                                        'label': {'type': 'string'},
                                                        'owner-tag': {'type': 'string'},
                                                        'params': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                'type': 'object'}},
                                                                   'type': 'object'},
                                                        'rotate-policy': {'type': 'string'},
                                                        'uri': {'type': 'string'}},
                                         'required': ['UpsertSecretArg',
                                                      'owner-tag'],
                                         'type': 'object'},
                     'CreateSecretArgs': {'additionalProperties': False,
                                          'properties': {'args': {'items': {'$ref': '#/definitions/CreateSecretArg'},
                                                                  'type': 'array'}},
                                          'required': ['args'],
                                          'type': 'object'},
                     'CreateSecretURIsArg': {'additionalProperties': False,
                                             'properties': {'count': {'type': 'integer'}},
                                             'required': ['count'],
                                             'type': 'object'},
                     'DeleteSecretArg': {'additionalProperties': False,
                                         'properties': {'revisions': {'items': {'type': 'integer'},
                                                                      'type': 'array'},
                                                        'uri': {'type': 'string'}},
                                         'required': ['uri'],
                                         'type': 'object'},
                     'DeleteSecretArgs': {'additionalProperties': False,
                                          'properties': {'args': {'items': {'$ref': '#/definitions/DeleteSecretArg'},
                                                                  'type': 'array'}},
                                          'required': ['args'],
                                          'type': 'object'},
                     'Endpoint': {'additionalProperties': False,
                                  'properties': {'application-name': {'type': 'string'},
                                                 'relation': {'$ref': '#/definitions/CharmRelation'}},
                                  'required': ['application-name', 'relation'],
                                  'type': 'object'},
                     'Entities': {'additionalProperties': False,
                                  'properties': {'entities': {'items': {'$ref': '#/definitions/Entity'},
                                                              'type': 'array'}},
                                  'required': ['entities'],
                                  'type': 'object'},
                     'EntitiesCharmURL': {'additionalProperties': False,
                                          'properties': {'entities': {'items': {'$ref': '#/definitions/EntityCharmURL'},
                                                                      'type': 'array'}},
                                          'required': ['entities'],
                                          'type': 'object'},
                     'Entity': {'additionalProperties': False,
                                'properties': {'tag': {'type': 'string'}},
                                'required': ['tag'],
                                'type': 'object'},
                     'EntityCharmURL': {'additionalProperties': False,
                                        'properties': {'charm-url': {'type': 'string'},
                                                       'tag': {'type': 'string'}},
                                        'required': ['tag', 'charm-url'],
                                        'type': 'object'},
                     'EntityPortRange': {'additionalProperties': False,
                                         'properties': {'endpoint': {'type': 'string'},
                                                        'from-port': {'type': 'integer'},
                                                        'protocol': {'type': 'string'},
                                                        'tag': {'type': 'string'},
                                                        'to-port': {'type': 'integer'}},
                                         'required': ['tag',
                                                      'protocol',
                                                      'from-port',
                                                      'to-port',
                                                      'endpoint'],
                                         'type': 'object'},
                     'EntityStatusArgs': {'additionalProperties': False,
                                          'properties': {'data': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                               'type': 'object'}},
                                                                  'type': 'object'},
                                                         'info': {'type': 'string'},
                                                         'status': {'type': 'string'},
                                                         'tag': {'type': 'string'}},
                                          'required': ['tag',
                                                       'status',
                                                       'info',
                                                       'data'],
                                          'type': 'object'},
                     'EntityString': {'additionalProperties': False,
                                      'properties': {'tag': {'type': 'string'},
                                                     'value': {'type': 'string'}},
                                      'required': ['tag', 'value'],
                                      'type': 'object'},
                     'EntityWorkloadVersion': {'additionalProperties': False,
                                               'properties': {'tag': {'type': 'string'},
                                                              'workload-version': {'type': 'string'}},
                                               'required': ['tag',
                                                            'workload-version'],
                                               'type': 'object'},
                     'EntityWorkloadVersions': {'additionalProperties': False,
                                                'properties': {'entities': {'items': {'$ref': '#/definitions/EntityWorkloadVersion'},
                                                                            'type': 'array'}},
                                                'required': ['entities'],
                                                'type': 'object'},
                     'Error': {'additionalProperties': False,
                               'properties': {'code': {'type': 'string'},
                                              'info': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                    'type': 'object'}},
                                                       'type': 'object'},
                                              'message': {'type': 'string'}},
                               'required': ['message', 'code'],
                               'type': 'object'},
                     'ErrorResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'}},
                                     'type': 'object'},
                     'ErrorResults': {'additionalProperties': False,
                                      'properties': {'results': {'items': {'$ref': '#/definitions/ErrorResult'},
                                                                 'type': 'array'}},
                                      'required': ['results'],
                                      'type': 'object'},
                     'GetLeadershipSettingsBulkResults': {'additionalProperties': False,
                                                          'properties': {'results': {'items': {'$ref': '#/definitions/GetLeadershipSettingsResult'},
                                                                                     'type': 'array'}},
                                                          'required': ['results'],
                                                          'type': 'object'},
                     'GetLeadershipSettingsResult': {'additionalProperties': False,
                                                     'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                    'settings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                                 'type': 'object'}},
                                                     'required': ['settings'],
                                                     'type': 'object'},
                     'GetSecretConsumerInfoArgs': {'additionalProperties': False,
                                                   'properties': {'consumer-tag': {'type': 'string'},
                                                                  'uris': {'items': {'type': 'string'},
                                                                           'type': 'array'}},
                                                   'required': ['consumer-tag',
                                                                'uris'],
                                                   'type': 'object'},
                     'GetSecretContentArg': {'additionalProperties': False,
                                             'properties': {'label': {'type': 'string'},
                                                            'peek': {'type': 'boolean'},
                                                            'refresh': {'type': 'boolean'},
                                                            'uri': {'type': 'string'}},
                                             'required': ['uri'],
                                             'type': 'object'},
                     'GetSecretContentArgs': {'additionalProperties': False,
                                              'properties': {'args': {'items': {'$ref': '#/definitions/GetSecretContentArg'},
                                                                      'type': 'array'}},
                                              'required': ['args'],
                                              'type': 'object'},
                     'GoalState': {'additionalProperties': False,
                                   'properties': {'relations': {'patternProperties': {'.*': {'patternProperties': {'.*': {'$ref': '#/definitions/GoalStateStatus'}},
                                                                                             'type': 'object'}},
                                                                'type': 'object'},
                                                  'units': {'patternProperties': {'.*': {'$ref': '#/definitions/GoalStateStatus'}},
                                                            'type': 'object'}},
                                   'required': ['units', 'relations'],
                                   'type': 'object'},
                     'GoalStateResult': {'additionalProperties': False,
                                         'properties': {'error': {'$ref': '#/definitions/Error'},
                                                        'result': {'$ref': '#/definitions/GoalState'}},
                                         'required': ['result', 'error'],
                                         'type': 'object'},
                     'GoalStateResults': {'additionalProperties': False,
                                          'properties': {'results': {'items': {'$ref': '#/definitions/GoalStateResult'},
                                                                     'type': 'array'}},
                                          'required': ['results'],
                                          'type': 'object'},
                     'GoalStateStatus': {'additionalProperties': False,
                                         'properties': {'since': {'format': 'date-time',
                                                                  'type': 'string'},
                                                        'status': {'type': 'string'}},
                                         'required': ['status', 'since'],
                                         'type': 'object'},
                     'GrantRevokeSecretArg': {'additionalProperties': False,
                                              'properties': {'role': {'type': 'string'},
                                                             'scope-tag': {'type': 'string'},
                                                             'subject-tags': {'items': {'type': 'string'},
                                                                              'type': 'array'},
                                                             'uri': {'type': 'string'}},
                                              'required': ['uri',
                                                           'scope-tag',
                                                           'subject-tags',
                                                           'role'],
                                              'type': 'object'},
                     'GrantRevokeSecretArgs': {'additionalProperties': False,
                                               'properties': {'args': {'items': {'$ref': '#/definitions/GrantRevokeSecretArg'},
                                                                       'type': 'array'}},
                                               'required': ['args'],
                                               'type': 'object'},
                     'HostPort': {'additionalProperties': False,
                                  'properties': {'Address': {'$ref': '#/definitions/Address'},
                                                 'cidr': {'type': 'string'},
                                                 'config-type': {'type': 'string'},
                                                 'is-secondary': {'type': 'boolean'},
                                                 'port': {'type': 'integer'},
                                                 'scope': {'type': 'string'},
                                                 'space-id': {'type': 'string'},
                                                 'space-name': {'type': 'string'},
                                                 'type': {'type': 'string'},
                                                 'value': {'type': 'string'}},
                                  'required': ['value',
                                               'type',
                                               'scope',
                                               'Address',
                                               'port'],
                                  'type': 'object'},
                     'IntResult': {'additionalProperties': False,
                                   'properties': {'error': {'$ref': '#/definitions/Error'},
                                                  'result': {'type': 'integer'}},
                                   'required': ['result'],
                                   'type': 'object'},
                     'IntResults': {'additionalProperties': False,
                                    'properties': {'results': {'items': {'$ref': '#/definitions/IntResult'},
                                                               'type': 'array'}},
                                    'required': ['results'],
                                    'type': 'object'},
                     'InterfaceAddress': {'additionalProperties': False,
                                          'properties': {'cidr': {'type': 'string'},
                                                         'hostname': {'type': 'string'},
                                                         'value': {'type': 'string'}},
                                          'required': ['hostname', 'value', 'cidr'],
                                          'type': 'object'},
                     'LifeResult': {'additionalProperties': False,
                                    'properties': {'error': {'$ref': '#/definitions/Error'},
                                                   'life': {'type': 'string'}},
                                    'required': ['life'],
                                    'type': 'object'},
                     'LifeResults': {'additionalProperties': False,
                                     'properties': {'results': {'items': {'$ref': '#/definitions/LifeResult'},
                                                                'type': 'array'}},
                                     'required': ['results'],
                                     'type': 'object'},
                     'ListSecretResult': {'additionalProperties': False,
                                          'properties': {'create-time': {'format': 'date-time',
                                                                         'type': 'string'},
                                                         'description': {'type': 'string'},
                                                         'label': {'type': 'string'},
                                                         'latest-expire-time': {'format': 'date-time',
                                                                                'type': 'string'},
                                                         'latest-revision': {'type': 'integer'},
                                                         'next-rotate-time': {'format': 'date-time',
                                                                              'type': 'string'},
                                                         'owner-tag': {'type': 'string'},
                                                         'revisions': {'items': {'$ref': '#/definitions/SecretRevision'},
                                                                       'type': 'array'},
                                                         'rotate-policy': {'type': 'string'},
                                                         'update-time': {'format': 'date-time',
                                                                         'type': 'string'},
                                                         'uri': {'type': 'string'},
                                                         'value': {'$ref': '#/definitions/SecretValueResult'},
                                                         'version': {'type': 'integer'}},
                                          'required': ['uri',
                                                       'version',
                                                       'owner-tag',
                                                       'latest-revision',
                                                       'create-time',
                                                       'update-time',
                                                       'revisions'],
                                          'type': 'object'},
                     'ListSecretResults': {'additionalProperties': False,
                                           'properties': {'results': {'items': {'$ref': '#/definitions/ListSecretResult'},
                                                                      'type': 'array'}},
                                           'required': ['results'],
                                           'type': 'object'},
                     'MergeLeadershipSettingsBulkParams': {'additionalProperties': False,
                                                           'properties': {'params': {'items': {'$ref': '#/definitions/MergeLeadershipSettingsParam'},
                                                                                     'type': 'array'}},
                                                           'required': ['params'],
                                                           'type': 'object'},
                     'MergeLeadershipSettingsParam': {'additionalProperties': False,
                                                      'properties': {'application-tag': {'type': 'string'},
                                                                     'settings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                                  'type': 'object'},
                                                                     'unit-tag': {'type': 'string'}},
                                                      'required': ['settings'],
                                                      'type': 'object'},
                     'MeterStatusResult': {'additionalProperties': False,
                                           'properties': {'code': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'},
                                                          'info': {'type': 'string'}},
                                           'required': ['code', 'info'],
                                           'type': 'object'},
                     'MeterStatusResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/MeterStatusResult'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'},
                     'Metric': {'additionalProperties': False,
                                'properties': {'key': {'type': 'string'},
                                               'labels': {'patternProperties': {'.*': {'type': 'string'}},
                                                          'type': 'object'},
                                               'time': {'format': 'date-time',
                                                        'type': 'string'},
                                               'value': {'type': 'string'}},
                                'required': ['key', 'value', 'time'],
                                'type': 'object'},
                     'MetricBatch': {'additionalProperties': False,
                                     'properties': {'charm-url': {'type': 'string'},
                                                    'created': {'format': 'date-time',
                                                                'type': 'string'},
                                                    'metrics': {'items': {'$ref': '#/definitions/Metric'},
                                                                'type': 'array'},
                                                    'uuid': {'type': 'string'}},
                                     'required': ['uuid',
                                                  'charm-url',
                                                  'created',
                                                  'metrics'],
                                     'type': 'object'},
                     'MetricBatchParam': {'additionalProperties': False,
                                          'properties': {'batch': {'$ref': '#/definitions/MetricBatch'},
                                                         'tag': {'type': 'string'}},
                                          'required': ['tag', 'batch'],
                                          'type': 'object'},
                     'MetricBatchParams': {'additionalProperties': False,
                                           'properties': {'batches': {'items': {'$ref': '#/definitions/MetricBatchParam'},
                                                                      'type': 'array'}},
                                           'required': ['batches'],
                                           'type': 'object'},
                     'ModelConfigResult': {'additionalProperties': False,
                                           'properties': {'config': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                  'type': 'object'}},
                                                                     'type': 'object'}},
                                           'required': ['config'],
                                           'type': 'object'},
                     'ModelResult': {'additionalProperties': False,
                                     'properties': {'error': {'$ref': '#/definitions/Error'},
                                                    'name': {'type': 'string'},
                                                    'type': {'type': 'string'},
                                                    'uuid': {'type': 'string'}},
                                     'required': ['name', 'uuid', 'type'],
                                     'type': 'object'},
                     'NetworkInfo': {'additionalProperties': False,
                                     'properties': {'addresses': {'items': {'$ref': '#/definitions/InterfaceAddress'},
                                                                  'type': 'array'},
                                                    'interface-name': {'type': 'string'},
                                                    'mac-address': {'type': 'string'}},
                                     'required': ['mac-address',
                                                  'interface-name',
                                                  'addresses'],
                                     'type': 'object'},
                     'NetworkInfoParams': {'additionalProperties': False,
                                           'properties': {'bindings': {'items': {'type': 'string'},
                                                                       'type': 'array'},
                                                          'relation-id': {'type': 'integer'},
                                                          'unit': {'type': 'string'}},
                                           'required': ['unit', 'bindings'],
                                           'type': 'object'},
                     'NetworkInfoResult': {'additionalProperties': False,
                                           'properties': {'bind-addresses': {'items': {'$ref': '#/definitions/NetworkInfo'},
                                                                             'type': 'array'},
                                                          'egress-subnets': {'items': {'type': 'string'},
                                                                             'type': 'array'},
                                                          'error': {'$ref': '#/definitions/Error'},
                                                          'ingress-addresses': {'items': {'type': 'string'},
                                                                                'type': 'array'}},
                                           'type': 'object'},
                     'NetworkInfoResults': {'additionalProperties': False,
                                            'properties': {'results': {'patternProperties': {'.*': {'$ref': '#/definitions/NetworkInfoResult'}},
                                                                       'type': 'object'}},
                                            'required': ['results'],
                                            'type': 'object'},
                     'NotifyWatchResult': {'additionalProperties': False,
                                           'properties': {'NotifyWatcherId': {'type': 'string'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'required': ['NotifyWatcherId'],
                                           'type': 'object'},
                     'NotifyWatchResults': {'additionalProperties': False,
                                            'properties': {'results': {'items': {'$ref': '#/definitions/NotifyWatchResult'},
                                                                       'type': 'array'}},
                                            'required': ['results'],
                                            'type': 'object'},
                     'OpenPortRangesByEndpointResult': {'additionalProperties': False,
                                                        'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                       'unit-port-ranges': {'patternProperties': {'.*': {'items': {'$ref': '#/definitions/OpenUnitPortRangesByEndpoint'},
                                                                                                                         'type': 'array'}},
                                                                                            'type': 'object'}},
                                                        'required': ['unit-port-ranges'],
                                                        'type': 'object'},
                     'OpenPortRangesByEndpointResults': {'additionalProperties': False,
                                                         'properties': {'results': {'items': {'$ref': '#/definitions/OpenPortRangesByEndpointResult'},
                                                                                    'type': 'array'}},
                                                         'required': ['results'],
                                                         'type': 'object'},
                     'OpenUnitPortRangesByEndpoint': {'additionalProperties': False,
                                                      'properties': {'endpoint': {'type': 'string'},
                                                                     'port-ranges': {'items': {'$ref': '#/definitions/PortRange'},
                                                                                     'type': 'array'}},
                                                      'required': ['endpoint',
                                                                   'port-ranges'],
                                                      'type': 'object'},
                     'PodSpec': {'additionalProperties': False,
                                 'properties': {'spec': {'type': 'string'},
                                                'tag': {'type': 'string'}},
                                 'required': ['tag'],
                                 'type': 'object'},
                     'PortRange': {'additionalProperties': False,
                                   'properties': {'from-port': {'type': 'integer'},
                                                  'protocol': {'type': 'string'},
                                                  'to-port': {'type': 'integer'}},
                                   'required': ['from-port', 'to-port', 'protocol'],
                                   'type': 'object'},
                     'RelationIds': {'additionalProperties': False,
                                     'properties': {'relation-ids': {'items': {'type': 'integer'},
                                                                     'type': 'array'}},
                                     'required': ['relation-ids'],
                                     'type': 'object'},
                     'RelationResult': {'additionalProperties': False,
                                        'properties': {'bool': {'type': 'boolean'},
                                                       'endpoint': {'$ref': '#/definitions/Endpoint'},
                                                       'error': {'$ref': '#/definitions/Error'},
                                                       'id': {'type': 'integer'},
                                                       'key': {'type': 'string'},
                                                       'life': {'type': 'string'},
                                                       'other-application': {'type': 'string'}},
                                        'required': ['life',
                                                     'id',
                                                     'key',
                                                     'endpoint'],
                                        'type': 'object'},
                     'RelationResults': {'additionalProperties': False,
                                         'properties': {'results': {'items': {'$ref': '#/definitions/RelationResult'},
                                                                    'type': 'array'}},
                                         'required': ['results'],
                                         'type': 'object'},
                     'RelationStatusArg': {'additionalProperties': False,
                                           'properties': {'message': {'type': 'string'},
                                                          'relation-id': {'type': 'integer'},
                                                          'status': {'type': 'string'},
                                                          'unit-tag': {'type': 'string'}},
                                           'required': ['unit-tag',
                                                        'relation-id',
                                                        'status',
                                                        'message'],
                                           'type': 'object'},
                     'RelationStatusArgs': {'additionalProperties': False,
                                            'properties': {'args': {'items': {'$ref': '#/definitions/RelationStatusArg'},
                                                                    'type': 'array'}},
                                            'required': ['args'],
                                            'type': 'object'},
                     'RelationUnit': {'additionalProperties': False,
                                      'properties': {'relation': {'type': 'string'},
                                                     'unit': {'type': 'string'}},
                                      'required': ['relation', 'unit'],
                                      'type': 'object'},
                     'RelationUnitPair': {'additionalProperties': False,
                                          'properties': {'local-unit': {'type': 'string'},
                                                         'relation': {'type': 'string'},
                                                         'remote-unit': {'type': 'string'}},
                                          'required': ['relation',
                                                       'local-unit',
                                                       'remote-unit'],
                                          'type': 'object'},
                     'RelationUnitPairs': {'additionalProperties': False,
                                           'properties': {'relation-unit-pairs': {'items': {'$ref': '#/definitions/RelationUnitPair'},
                                                                                  'type': 'array'}},
                                           'required': ['relation-unit-pairs'],
                                           'type': 'object'},
                     'RelationUnitSettings': {'additionalProperties': False,
                                              'properties': {'application-settings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                                      'type': 'object'},
                                                             'relation': {'type': 'string'},
                                                             'settings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                          'type': 'object'},
                                                             'unit': {'type': 'string'}},
                                              'required': ['relation',
                                                           'unit',
                                                           'settings',
                                                           'application-settings'],
                                              'type': 'object'},
                     'RelationUnitStatus': {'additionalProperties': False,
                                            'properties': {'in-scope': {'type': 'boolean'},
                                                           'relation-tag': {'type': 'string'},
                                                           'suspended': {'type': 'boolean'}},
                                            'required': ['relation-tag',
                                                         'in-scope',
                                                         'suspended'],
                                            'type': 'object'},
                     'RelationUnitStatusResult': {'additionalProperties': False,
                                                  'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                 'results': {'items': {'$ref': '#/definitions/RelationUnitStatus'},
                                                                             'type': 'array'}},
                                                  'required': ['results'],
                                                  'type': 'object'},
                     'RelationUnitStatusResults': {'additionalProperties': False,
                                                   'properties': {'results': {'items': {'$ref': '#/definitions/RelationUnitStatusResult'},
                                                                              'type': 'array'}},
                                                   'required': ['results'],
                                                   'type': 'object'},
                     'RelationUnits': {'additionalProperties': False,
                                       'properties': {'relation-units': {'items': {'$ref': '#/definitions/RelationUnit'},
                                                                         'type': 'array'}},
                                       'required': ['relation-units'],
                                       'type': 'object'},
                     'RelationUnitsChange': {'additionalProperties': False,
                                             'properties': {'app-changed': {'patternProperties': {'.*': {'type': 'integer'}},
                                                                            'type': 'object'},
                                                            'changed': {'patternProperties': {'.*': {'$ref': '#/definitions/UnitSettings'}},
                                                                        'type': 'object'},
                                                            'departed': {'items': {'type': 'string'},
                                                                         'type': 'array'}},
                                             'required': ['changed'],
                                             'type': 'object'},
                     'RelationUnitsWatchResult': {'additionalProperties': False,
                                                  'properties': {'changes': {'$ref': '#/definitions/RelationUnitsChange'},
                                                                 'error': {'$ref': '#/definitions/Error'},
                                                                 'watcher-id': {'type': 'string'}},
                                                  'required': ['watcher-id',
                                                               'changes'],
                                                  'type': 'object'},
                     'RelationUnitsWatchResults': {'additionalProperties': False,
                                                   'properties': {'results': {'items': {'$ref': '#/definitions/RelationUnitsWatchResult'},
                                                                              'type': 'array'}},
                                                   'required': ['results'],
                                                   'type': 'object'},
                     'ResolvedModeResult': {'additionalProperties': False,
                                            'properties': {'error': {'$ref': '#/definitions/Error'},
                                                           'mode': {'type': 'string'}},
                                            'required': ['mode'],
                                            'type': 'object'},
                     'ResolvedModeResults': {'additionalProperties': False,
                                             'properties': {'results': {'items': {'$ref': '#/definitions/ResolvedModeResult'},
                                                                        'type': 'array'}},
                                             'required': ['results'],
                                             'type': 'object'},
                     'SecretBackendArgs': {'additionalProperties': False,
                                           'properties': {'backend-ids': {'items': {'type': 'string'},
                                                                          'type': 'array'}},
                                           'required': ['backend-ids'],
                                           'type': 'object'},
                     'SecretBackendConfig': {'additionalProperties': False,
                                             'properties': {'params': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                    'type': 'object'}},
                                                                       'type': 'object'},
                                                            'type': {'type': 'string'}},
                                             'required': ['type'],
                                             'type': 'object'},
                     'SecretBackendConfigResult': {'additionalProperties': False,
                                                   'properties': {'config': {'$ref': '#/definitions/SecretBackendConfig'},
                                                                  'draining': {'type': 'boolean'},
                                                                  'model-controller': {'type': 'string'},
                                                                  'model-name': {'type': 'string'},
                                                                  'model-uuid': {'type': 'string'}},
                                                   'required': ['model-controller',
                                                                'model-uuid',
                                                                'model-name',
                                                                'draining'],
                                                   'type': 'object'},
                     'SecretBackendConfigResults': {'additionalProperties': False,
                                                    'properties': {'active-id': {'type': 'string'},
                                                                   'results': {'patternProperties': {'.*': {'$ref': '#/definitions/SecretBackendConfigResult'}},
                                                                               'type': 'object'}},
                                                    'required': ['active-id'],
                                                    'type': 'object'},
                     'SecretConsumerInfoResult': {'additionalProperties': False,
                                                  'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                 'label': {'type': 'string'},
                                                                 'revision': {'type': 'integer'}},
                                                  'required': ['revision', 'label'],
                                                  'type': 'object'},
                     'SecretConsumerInfoResults': {'additionalProperties': False,
                                                   'properties': {'results': {'items': {'$ref': '#/definitions/SecretConsumerInfoResult'},
                                                                              'type': 'array'}},
                                                   'required': ['results'],
                                                   'type': 'object'},
                     'SecretContentParams': {'additionalProperties': False,
                                             'properties': {'data': {'patternProperties': {'.*': {'type': 'string'}},
                                                                     'type': 'object'},
                                                            'value-ref': {'$ref': '#/definitions/SecretValueRef'}},
                                             'type': 'object'},
                     'SecretContentResult': {'additionalProperties': False,
                                             'properties': {'backend-config': {'$ref': '#/definitions/SecretBackendConfigResult'},
                                                            'content': {'$ref': '#/definitions/SecretContentParams'},
                                                            'error': {'$ref': '#/definitions/Error'},
                                                            'latest-revision': {'type': 'integer'}},
                                             'required': ['content'],
                                             'type': 'object'},
                     'SecretContentResults': {'additionalProperties': False,
                                              'properties': {'results': {'items': {'$ref': '#/definitions/SecretContentResult'},
                                                                         'type': 'array'}},
                                              'required': ['results'],
                                              'type': 'object'},
                     'SecretRevision': {'additionalProperties': False,
                                        'properties': {'backend-name': {'type': 'string'},
                                                       'create-time': {'format': 'date-time',
                                                                       'type': 'string'},
                                                       'expire-time': {'format': 'date-time',
                                                                       'type': 'string'},
                                                       'revision': {'type': 'integer'},
                                                       'update-time': {'format': 'date-time',
                                                                       'type': 'string'},
                                                       'value-ref': {'$ref': '#/definitions/SecretValueRef'}},
                                        'required': ['revision'],
                                        'type': 'object'},
                     'SecretRevisionArg': {'additionalProperties': False,
                                           'properties': {'pending-delete': {'type': 'boolean'},
                                                          'revisions': {'items': {'type': 'integer'},
                                                                        'type': 'array'},
                                                          'uri': {'type': 'string'}},
                                           'required': ['uri',
                                                        'revisions',
                                                        'pending-delete'],
                                           'type': 'object'},
                     'SecretRotatedArg': {'additionalProperties': False,
                                          'properties': {'original-revision': {'type': 'integer'},
                                                         'skip': {'type': 'boolean'},
                                                         'uri': {'type': 'string'}},
                                          'required': ['uri',
                                                       'original-revision',
                                                       'skip'],
                                          'type': 'object'},
                     'SecretRotatedArgs': {'additionalProperties': False,
                                           'properties': {'args': {'items': {'$ref': '#/definitions/SecretRotatedArg'},
                                                                   'type': 'array'}},
                                           'required': ['args'],
                                           'type': 'object'},
                     'SecretTriggerChange': {'additionalProperties': False,
                                             'properties': {'next-trigger-time': {'format': 'date-time',
                                                                                  'type': 'string'},
                                                            'revision': {'type': 'integer'},
                                                            'uri': {'type': 'string'}},
                                             'required': ['uri',
                                                          'next-trigger-time'],
                                             'type': 'object'},
                     'SecretTriggerWatchResult': {'additionalProperties': False,
                                                  'properties': {'changes': {'items': {'$ref': '#/definitions/SecretTriggerChange'},
                                                                             'type': 'array'},
                                                                 'error': {'$ref': '#/definitions/Error'},
                                                                 'watcher-id': {'type': 'string'}},
                                                  'required': ['watcher-id',
                                                               'changes'],
                                                  'type': 'object'},
                     'SecretValueRef': {'additionalProperties': False,
                                        'properties': {'backend-id': {'type': 'string'},
                                                       'revision-id': {'type': 'string'}},
                                        'required': ['backend-id', 'revision-id'],
                                        'type': 'object'},
                     'SecretValueResult': {'additionalProperties': False,
                                           'properties': {'data': {'patternProperties': {'.*': {'type': 'string'}},
                                                                   'type': 'object'},
                                                          'error': {'$ref': '#/definitions/Error'}},
                                           'type': 'object'},
                     'SetStatus': {'additionalProperties': False,
                                   'properties': {'entities': {'items': {'$ref': '#/definitions/EntityStatusArgs'},
                                                               'type': 'array'}},
                                   'required': ['entities'],
                                   'type': 'object'},
                     'SetUnitStateArg': {'additionalProperties': False,
                                         'properties': {'charm-state': {'patternProperties': {'.*': {'type': 'string'}},
                                                                        'type': 'object'},
                                                        'meter-status-state': {'type': 'string'},
                                                        'relation-state': {'patternProperties': {'.*': {'type': 'string'}},
                                                                           'type': 'object'},
                                                        'secret-state': {'type': 'string'},
                                                        'storage-state': {'type': 'string'},
                                                        'tag': {'type': 'string'},
                                                        'uniter-state': {'type': 'string'}},
                                         'required': ['tag'],
                                         'type': 'object'},
                     'SetUnitStateArgs': {'additionalProperties': False,
                                          'properties': {'args': {'items': {'$ref': '#/definitions/SetUnitStateArg'},
                                                                  'type': 'array'}},
                                          'required': ['args'],
                                          'type': 'object'},
                     'SettingsResult': {'additionalProperties': False,
                                        'properties': {'error': {'$ref': '#/definitions/Error'},
                                                       'settings': {'patternProperties': {'.*': {'type': 'string'}},
                                                                    'type': 'object'}},
                                        'required': ['settings'],
                                        'type': 'object'},
                     'SettingsResults': {'additionalProperties': False,
                                         'properties': {'results': {'items': {'$ref': '#/definitions/SettingsResult'},
                                                                    'type': 'array'}},
                                         'required': ['results'],
                                         'type': 'object'},
                     'StatusResult': {'additionalProperties': False,
                                      'properties': {'data': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                           'type': 'object'}},
                                                              'type': 'object'},
                                                     'error': {'$ref': '#/definitions/Error'},
                                                     'id': {'type': 'string'},
                                                     'info': {'type': 'string'},
                                                     'life': {'type': 'string'},
                                                     'since': {'format': 'date-time',
                                                               'type': 'string'},
                                                     'status': {'type': 'string'}},
                                      'required': ['id',
                                                   'life',
                                                   'status',
                                                   'info',
                                                   'data',
                                                   'since'],
                                      'type': 'object'},
                     'StatusResults': {'additionalProperties': False,
                                       'properties': {'results': {'items': {'$ref': '#/definitions/StatusResult'},
                                                                  'type': 'array'}},
                                       'required': ['results'],
                                       'type': 'object'},
                     'StorageAddParams': {'additionalProperties': False,
                                          'properties': {'name': {'type': 'string'},
                                                         'storage': {'$ref': '#/definitions/StorageConstraints'},
                                                         'unit': {'type': 'string'}},
                                          'required': ['unit', 'name', 'storage'],
                                          'type': 'object'},
                     'StorageAttachment': {'additionalProperties': False,
                                           'properties': {'kind': {'type': 'integer'},
                                                          'life': {'type': 'string'},
                                                          'location': {'type': 'string'},
                                                          'owner-tag': {'type': 'string'},
                                                          'storage-tag': {'type': 'string'},
                                                          'unit-tag': {'type': 'string'}},
                                           'required': ['storage-tag',
                                                        'owner-tag',
                                                        'unit-tag',
                                                        'kind',
                                                        'location',
                                                        'life'],
                                           'type': 'object'},
                     'StorageAttachmentId': {'additionalProperties': False,
                                             'properties': {'storage-tag': {'type': 'string'},
                                                            'unit-tag': {'type': 'string'}},
                                             'required': ['storage-tag',
                                                          'unit-tag'],
                                             'type': 'object'},
                     'StorageAttachmentIds': {'additionalProperties': False,
                                              'properties': {'ids': {'items': {'$ref': '#/definitions/StorageAttachmentId'},
                                                                     'type': 'array'}},
                                              'required': ['ids'],
                                              'type': 'object'},
                     'StorageAttachmentIdsResult': {'additionalProperties': False,
                                                    'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                   'result': {'$ref': '#/definitions/StorageAttachmentIds'}},
                                                    'required': ['result'],
                                                    'type': 'object'},
                     'StorageAttachmentIdsResults': {'additionalProperties': False,
                                                     'properties': {'results': {'items': {'$ref': '#/definitions/StorageAttachmentIdsResult'},
                                                                                'type': 'array'}},
                                                     'type': 'object'},
                     'StorageAttachmentResult': {'additionalProperties': False,
                                                 'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                'result': {'$ref': '#/definitions/StorageAttachment'}},
                                                 'required': ['result'],
                                                 'type': 'object'},
                     'StorageAttachmentResults': {'additionalProperties': False,
                                                  'properties': {'results': {'items': {'$ref': '#/definitions/StorageAttachmentResult'},
                                                                             'type': 'array'}},
                                                  'type': 'object'},
                     'StorageConstraints': {'additionalProperties': False,
                                            'properties': {'count': {'type': 'integer'},
                                                           'pool': {'type': 'string'},
                                                           'size': {'type': 'integer'}},
                                            'type': 'object'},
                     'StringBoolResult': {'additionalProperties': False,
                                          'properties': {'error': {'$ref': '#/definitions/Error'},
                                                         'ok': {'type': 'boolean'},
                                                         'result': {'type': 'string'}},
                                          'required': ['result', 'ok'],
                                          'type': 'object'},
                     'StringBoolResults': {'additionalProperties': False,
                                           'properties': {'results': {'items': {'$ref': '#/definitions/StringBoolResult'},
                                                                      'type': 'array'}},
                                           'required': ['results'],
                                           'type': 'object'},
                     'StringResult': {'additionalProperties': False,
                                      'properties': {'error': {'$ref': '#/definitions/Error'},
                                                     'result': {'type': 'string'}},
                                      'required': ['result'],
                                      'type': 'object'},
                     'StringResults': {'additionalProperties': False,
                                       'properties': {'results': {'items': {'$ref': '#/definitions/StringResult'},
                                                                  'type': 'array'}},
                                       'required': ['results'],
                                       'type': 'object'},
                     'StringsResult': {'additionalProperties': False,
                                       'properties': {'error': {'$ref': '#/definitions/Error'},
                                                      'result': {'items': {'type': 'string'},
                                                                 'type': 'array'}},
                                       'type': 'object'},
                     'StringsWatchResult': {'additionalProperties': False,
                                            'properties': {'changes': {'items': {'type': 'string'},
                                                                       'type': 'array'},
                                                           'error': {'$ref': '#/definitions/Error'},
                                                           'watcher-id': {'type': 'string'}},
                                            'required': ['watcher-id'],
                                            'type': 'object'},
                     'StringsWatchResults': {'additionalProperties': False,
                                             'properties': {'results': {'items': {'$ref': '#/definitions/StringsWatchResult'},
                                                                        'type': 'array'}},
                                             'required': ['results'],
                                             'type': 'object'},
                     'UnitRefreshResult': {'additionalProperties': False,
                                           'properties': {'Error': {'$ref': '#/definitions/Error'},
                                                          'Life': {'type': 'string'},
                                                          'Resolved': {'type': 'string'},
                                                          'provider-id': {'type': 'string'}},
                                           'required': ['Life',
                                                        'Resolved',
                                                        'Error'],
                                           'type': 'object'},
                     'UnitRefreshResults': {'additionalProperties': False,
                                            'properties': {'Results': {'items': {'$ref': '#/definitions/UnitRefreshResult'},
                                                                       'type': 'array'}},
                                            'required': ['Results'],
                                            'type': 'object'},
                     'UnitSettings': {'additionalProperties': False,
                                      'properties': {'version': {'type': 'integer'}},
                                      'required': ['version'],
                                      'type': 'object'},
                     'UnitStateResult': {'additionalProperties': False,
                                         'properties': {'charm-state': {'patternProperties': {'.*': {'type': 'string'}},
                                                                        'type': 'object'},
                                                        'error': {'$ref': '#/definitions/Error'},
                                                        'meter-status-state': {'type': 'string'},
                                                        'relation-state': {'patternProperties': {'.*': {'type': 'string'}},
                                                                           'type': 'object'},
                                                        'secret-state': {'type': 'string'},
                                                        'storage-state': {'type': 'string'},
                                                        'uniter-state': {'type': 'string'}},
                                         'type': 'object'},
                     'UnitStateResults': {'additionalProperties': False,
                                          'properties': {'results': {'items': {'$ref': '#/definitions/UnitStateResult'},
                                                                     'type': 'array'}},
                                          'required': ['results'],
                                          'type': 'object'},
                     'UpdateSecretArg': {'additionalProperties': False,
                                         'properties': {'UpsertSecretArg': {'$ref': '#/definitions/UpsertSecretArg'},
                                                        'content': {'$ref': '#/definitions/SecretContentParams'},
                                                        'description': {'type': 'string'},
                                                        'expire-time': {'format': 'date-time',
                                                                        'type': 'string'},
                                                        'label': {'type': 'string'},
                                                        'params': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                'type': 'object'}},
                                                                   'type': 'object'},
                                                        'rotate-policy': {'type': 'string'},
                                                        'uri': {'type': 'string'}},
                                         'required': ['UpsertSecretArg', 'uri'],
                                         'type': 'object'},
                     'UpdateSecretArgs': {'additionalProperties': False,
                                          'properties': {'args': {'items': {'$ref': '#/definitions/UpdateSecretArg'},
                                                                  'type': 'array'}},
                                          'required': ['args'],
                                          'type': 'object'},
                     'UpgradeSeriesStatusParam': {'additionalProperties': False,
                                                  'properties': {'entity': {'$ref': '#/definitions/Entity'},
                                                                 'message': {'type': 'string'},
                                                                 'status': {'type': 'string'}},
                                                  'required': ['entity',
                                                               'status',
                                                               'message'],
                                                  'type': 'object'},
                     'UpgradeSeriesStatusParams': {'additionalProperties': False,
                                                   'properties': {'params': {'items': {'$ref': '#/definitions/UpgradeSeriesStatusParam'},
                                                                             'type': 'array'}},
                                                   'required': ['params'],
                                                   'type': 'object'},
                     'UpgradeSeriesStatusResult': {'additionalProperties': False,
                                                   'properties': {'error': {'$ref': '#/definitions/Error'},
                                                                  'status': {'type': 'string'},
                                                                  'target': {'type': 'string'}},
                                                   'type': 'object'},
                     'UpgradeSeriesStatusResults': {'additionalProperties': False,
                                                    'properties': {'results': {'items': {'$ref': '#/definitions/UpgradeSeriesStatusResult'},
                                                                               'type': 'array'}},
                                                    'type': 'object'},
                     'UpsertSecretArg': {'additionalProperties': False,
                                         'properties': {'content': {'$ref': '#/definitions/SecretContentParams'},
                                                        'description': {'type': 'string'},
                                                        'expire-time': {'format': 'date-time',
                                                                        'type': 'string'},
                                                        'label': {'type': 'string'},
                                                        'params': {'patternProperties': {'.*': {'additionalProperties': True,
                                                                                                'type': 'object'}},
                                                                   'type': 'object'},
                                                        'rotate-policy': {'type': 'string'}},
                                         'type': 'object'}},
     'properties': {'APIAddresses': {'description': 'APIAddresses returns the list '
                                                    'of addresses used to connect '
                                                    'to the API.',
                                     'properties': {'Result': {'$ref': '#/definitions/StringsResult'}},
                                     'type': 'object'},
                    'APIHostPorts': {'description': 'APIHostPorts returns the API '
                                                    'server addresses.',
                                     'properties': {'Result': {'$ref': '#/definitions/APIHostPortsResult'}},
                                     'type': 'object'},
                    'ActionStatus': {'description': 'ActionStatus returns the '
                                                    'status of Actions by Tags '
                                                    'passed in.',
                                     'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                    'Result': {'$ref': '#/definitions/StringResults'}},
                                     'type': 'object'},
                    'Actions': {'description': 'Actions returns the Actions by '
                                               'Tags passed and ensures that the '
                                               'Unit asking\n'
                                               'for them is the same Unit that has '
                                               'the Actions.',
                                'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                               'Result': {'$ref': '#/definitions/ActionResults'}},
                                'type': 'object'},
                    'AddMetricBatches': {'description': 'AddMetricBatches adds the '
                                                        'metrics for the specified '
                                                        'unit.',
                                         'properties': {'Params': {'$ref': '#/definitions/MetricBatchParams'},
                                                        'Result': {'$ref': '#/definitions/ErrorResults'}},
                                         'type': 'object'},
                    'ApplicationStatus': {'description': 'ApplicationStatus '
                                                         'returns the status of '
                                                         'the Applications and its '
                                                         'workloads\n'
                                                         'if the given unit is the '
                                                         'leader.',
                                          'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                         'Result': {'$ref': '#/definitions/ApplicationStatusResults'}},
                                          'type': 'object'},
                    'AssignedMachine': {'description': 'AssignedMachine returns '
                                                       'the machine tag for each '
                                                       'given unit tag, or\n'
                                                       'an error satisfying '
                                                       'params.IsCodeNotAssigned '
                                                       'when a unit has no\n'
                                                       'assigned machine.',
                                        'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                       'Result': {'$ref': '#/definitions/StringResults'}},
                                        'type': 'object'},
                    'AvailabilityZone': {'description': 'AvailabilityZone returns '
                                                        'the availability zone for '
                                                        'each given unit, if '
                                                        'applicable.',
                                         'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                        'Result': {'$ref': '#/definitions/StringResults'}},
                                         'type': 'object'},
                    'BeginActions': {'description': 'BeginActions marks the '
                                                    'actions represented by the '
                                                    'passed in Tags as running.',
                                     'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                    'Result': {'$ref': '#/definitions/ErrorResults'}},
                                     'type': 'object'},
                    'CanApplyLXDProfile': {'description': 'CanApplyLXDProfile is a '
                                                          'shim to call the '
                                                          'LXDProfileAPIv2 version '
                                                          'of this method.',
                                           'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                          'Result': {'$ref': '#/definitions/BoolResults'}},
                                           'type': 'object'},
                    'CharmArchiveSha256': {'description': 'CharmArchiveSha256 '
                                                          'returns the SHA256 '
                                                          'digest of the charm '
                                                          'archive\n'
                                                          '(bundle) data for each '
                                                          'charm url in the given '
                                                          'parameters.',
                                           'properties': {'Params': {'$ref': '#/definitions/CharmURLs'},
                                                          'Result': {'$ref': '#/definitions/StringResults'}},
                                           'type': 'object'},
                    'CharmModifiedVersion': {'description': 'CharmModifiedVersion '
                                                            'returns the most '
                                                            'CharmModifiedVersion '
                                                            'for all given\n'
                                                            'units or '
                                                            'applications.',
                                             'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                            'Result': {'$ref': '#/definitions/IntResults'}},
                                             'type': 'object'},
                    'CharmURL': {'description': 'CharmURL returns the charm URL '
                                                'for all given units or '
                                                'applications.',
                                 'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                'Result': {'$ref': '#/definitions/StringBoolResults'}},
                                 'type': 'object'},
                    'ClearResolved': {'description': 'ClearResolved removes any '
                                                     'resolved setting from each '
                                                     'given unit.',
                                      'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                     'Result': {'$ref': '#/definitions/ErrorResults'}},
                                      'type': 'object'},
                    'CloudAPIVersion': {'description': 'CloudAPIVersion returns '
                                                       'the cloud API version, if '
                                                       'available.',
                                        'properties': {'Result': {'$ref': '#/definitions/StringResult'}},
                                        'type': 'object'},
                    'CloudSpec': {'description': 'CloudSpec returns the cloud spec '
                                                 'used by the model in which the\n'
                                                 'authenticated unit or '
                                                 'application resides.\n'
                                                 'A check is made beforehand to '
                                                 'ensure that the request is made '
                                                 'by an entity\n'
                                                 'that has been granted the '
                                                 'appropriate trust.',
                                  'properties': {'Result': {'$ref': '#/definitions/CloudSpecResult'}},
                                  'type': 'object'},
                    'CommitHookChanges': {'description': 'CommitHookChanges '
                                                         'batches together all '
                                                         'required API calls for '
                                                         'applying\n'
                                                         'a set of changes after a '
                                                         'hook successfully '
                                                         'completes and executes '
                                                         'them in a\n'
                                                         'single transaction.',
                                          'properties': {'Params': {'$ref': '#/definitions/CommitHookChangesArgs'},
                                                         'Result': {'$ref': '#/definitions/ErrorResults'}},
                                          'type': 'object'},
                    'ConfigSettings': {'description': 'ConfigSettings returns the '
                                                      'complete set of application '
                                                      'charm config\n'
                                                      'settings available to each '
                                                      'given unit.',
                                       'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                      'Result': {'$ref': '#/definitions/ConfigSettingsResults'}},
                                       'type': 'object'},
                    'CreateSecretURIs': {'description': 'CreateSecretURIs creates '
                                                        'new secret URIs.',
                                         'properties': {'Params': {'$ref': '#/definitions/CreateSecretURIsArg'},
                                                        'Result': {'$ref': '#/definitions/StringResults'}},
                                         'type': 'object'},
                    'CreateSecrets': {'description': 'CreateSecrets creates new '
                                                     'secrets.',
                                      'properties': {'Params': {'$ref': '#/definitions/CreateSecretArgs'},
                                                     'Result': {'$ref': '#/definitions/StringResults'}},
                                      'type': 'object'},
                    'CurrentModel': {'description': 'CurrentModel returns the name '
                                                    'and UUID for the current juju '
                                                    'model.',
                                     'properties': {'Result': {'$ref': '#/definitions/ModelResult'}},
                                     'type': 'object'},
                    'Destroy': {'description': 'Destroy advances all given Alive '
                                               "units' lifecycles as far as\n"
                                               'possible. See '
                                               'state/Unit.Destroy().',
                                'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                               'Result': {'$ref': '#/definitions/ErrorResults'}},
                                'type': 'object'},
                    'DestroyAllSubordinates': {'description': 'DestroyAllSubordinates '
                                                              'destroys all '
                                                              'subordinates of '
                                                              'each given unit.',
                                               'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                              'Result': {'$ref': '#/definitions/ErrorResults'}},
                                               'type': 'object'},
                    'DestroyUnitStorageAttachments': {'description': 'DestroyUnitStorageAttachments '
                                                                     'marks each '
                                                                     'storage '
                                                                     'attachment '
                                                                     'of the\n'
                                                                     'specified '
                                                                     'units as '
                                                                     'Dying.',
                                                      'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                     'Result': {'$ref': '#/definitions/ErrorResults'}},
                                                      'type': 'object'},
                    'EnsureDead': {'description': 'EnsureDead calls EnsureDead on '
                                                  'each given entity from state. '
                                                  'It\n'
                                                  'will fail if the entity is not '
                                                  "present. If it's Alive, nothing "
                                                  'will\n'
                                                  'happen (see state/EnsureDead() '
                                                  'for units or machines).',
                                   'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/ErrorResults'}},
                                   'type': 'object'},
                    'EnterScope': {'description': 'EnterScope ensures each unit '
                                                  'has entered its scope in the '
                                                  'relation,\n'
                                                  'for all of the given '
                                                  'relation/unit pairs. See also\n'
                                                  'state.RelationUnit.EnterScope().',
                                   'properties': {'Params': {'$ref': '#/definitions/RelationUnits'},
                                                  'Result': {'$ref': '#/definitions/ErrorResults'}},
                                   'type': 'object'},
                    'FinishActions': {'description': 'FinishActions saves the '
                                                     'result of a completed Action',
                                      'properties': {'Params': {'$ref': '#/definitions/ActionExecutionResults'},
                                                     'Result': {'$ref': '#/definitions/ErrorResults'}},
                                      'type': 'object'},
                    'GetConsumerSecretsRevisionInfo': {'description': 'GetConsumerSecretsRevisionInfo '
                                                                      'returns the '
                                                                      'latest '
                                                                      'secret '
                                                                      'revisions '
                                                                      'for the '
                                                                      'specified '
                                                                      'secrets.\n'
                                                                      'This facade '
                                                                      'method is '
                                                                      'used for '
                                                                      'remote '
                                                                      'watcher to '
                                                                      'get the '
                                                                      'latest '
                                                                      'secret '
                                                                      'revisions '
                                                                      'and labels '
                                                                      'for a '
                                                                      'secret '
                                                                      'changed '
                                                                      'hook.',
                                                       'properties': {'Params': {'$ref': '#/definitions/GetSecretConsumerInfoArgs'},
                                                                      'Result': {'$ref': '#/definitions/SecretConsumerInfoResults'}},
                                                       'type': 'object'},
                    'GetMeterStatus': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                      'Result': {'$ref': '#/definitions/MeterStatusResults'}},
                                       'type': 'object'},
                    'GetPodSpec': {'description': 'GetPodSpec gets the pod specs '
                                                  'for a set of applications.',
                                   'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/StringResults'}},
                                   'type': 'object'},
                    'GetPrincipal': {'description': 'GetPrincipal returns the '
                                                    'result of calling '
                                                    'PrincipalName() and\n'
                                                    'converting it to a tag, on '
                                                    'each given unit.',
                                     'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                    'Result': {'$ref': '#/definitions/StringBoolResults'}},
                                     'type': 'object'},
                    'GetRawK8sSpec': {'description': 'GetRawK8sSpec gets the raw '
                                                     'k8s specs for a set of '
                                                     'applications.',
                                      'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                     'Result': {'$ref': '#/definitions/StringResults'}},
                                      'type': 'object'},
                    'GetSecretBackendConfigs': {'description': 'GetSecretBackendConfigs '
                                                               'gets the config '
                                                               'needed to create a '
                                                               'client to secret '
                                                               'backends.',
                                                'properties': {'Params': {'$ref': '#/definitions/SecretBackendArgs'},
                                                               'Result': {'$ref': '#/definitions/SecretBackendConfigResults'}},
                                                'type': 'object'},
                    'GetSecretContentInfo': {'description': 'GetSecretContentInfo '
                                                            'returns the secret '
                                                            'values for the '
                                                            'specified secrets.',
                                             'properties': {'Params': {'$ref': '#/definitions/GetSecretContentArgs'},
                                                            'Result': {'$ref': '#/definitions/SecretContentResults'}},
                                             'type': 'object'},
                    'GetSecretMetadata': {'description': 'GetSecretMetadata '
                                                         'returns metadata for the '
                                                         "caller's secrets.",
                                          'properties': {'Result': {'$ref': '#/definitions/ListSecretResults'}},
                                          'type': 'object'},
                    'GetSecretRevisionContentInfo': {'description': 'GetSecretRevisionContentInfo '
                                                                    'returns the '
                                                                    'secret values '
                                                                    'for the '
                                                                    'specified '
                                                                    'secret '
                                                                    'revisions.',
                                                     'properties': {'Params': {'$ref': '#/definitions/SecretRevisionArg'},
                                                                    'Result': {'$ref': '#/definitions/SecretContentResults'}},
                                                     'type': 'object'},
                    'GoalStates': {'description': 'GoalStates returns information '
                                                  'of charm units and relations.',
                                   'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/GoalStateResults'}},
                                   'type': 'object'},
                    'HasSubordinates': {'description': 'HasSubordinates returns '
                                                       'the whether each given '
                                                       'unit has any subordinates.',
                                        'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                       'Result': {'$ref': '#/definitions/BoolResults'}},
                                        'type': 'object'},
                    'LXDProfileName': {'description': 'LXDProfileName is a shim to '
                                                      'call the LXDProfileAPIv2 '
                                                      'version of this method.',
                                       'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                      'Result': {'$ref': '#/definitions/StringResults'}},
                                       'type': 'object'},
                    'LXDProfileRequired': {'description': 'LXDProfileRequired is a '
                                                          'shim to call the '
                                                          'LXDProfileAPIv2 version '
                                                          'of this method.',
                                           'properties': {'Params': {'$ref': '#/definitions/CharmURLs'},
                                                          'Result': {'$ref': '#/definitions/BoolResults'}},
                                           'type': 'object'},
                    'LeaveScope': {'description': 'LeaveScope signals each unit '
                                                  'has left its scope in the '
                                                  'relation,\n'
                                                  'for all of the given '
                                                  'relation/unit pairs. See also\n'
                                                  'state.RelationUnit.LeaveScope().',
                                   'properties': {'Params': {'$ref': '#/definitions/RelationUnits'},
                                                  'Result': {'$ref': '#/definitions/ErrorResults'}},
                                   'type': 'object'},
                    'Life': {'description': 'Life returns the life status of every '
                                            'supplied entity, where available.',
                             'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                            'Result': {'$ref': '#/definitions/LifeResults'}},
                             'type': 'object'},
                    'LogActionsMessages': {'description': 'LogActionsMessages '
                                                          'records the log '
                                                          'messages against the '
                                                          'specified actions.',
                                           'properties': {'Params': {'$ref': '#/definitions/ActionMessageParams'},
                                                          'Result': {'$ref': '#/definitions/ErrorResults'}},
                                           'type': 'object'},
                    'Merge': {'description': 'Merge merges in the provided '
                                             'leadership settings. Only leaders '
                                             'for\n'
                                             'the given service may perform this '
                                             'operation.',
                              'properties': {'Params': {'$ref': '#/definitions/MergeLeadershipSettingsBulkParams'},
                                             'Result': {'$ref': '#/definitions/ErrorResults'}},
                              'type': 'object'},
                    'ModelConfig': {'description': 'ModelConfig returns the '
                                                   "current model's configuration.",
                                    'properties': {'Result': {'$ref': '#/definitions/ModelConfigResult'}},
                                    'type': 'object'},
                    'ModelUUID': {'description': 'ModelUUID returns the model UUID '
                                                 'that this unit resides in.\n'
                                                 'It is implemented here directly '
                                                 'as a result of removing it from\n'
                                                 'embedded APIAddresser *without* '
                                                 'bumping the facade version.\n'
                                                 'It should be blanked when this '
                                                 'facade version is next '
                                                 'incremented.',
                                  'properties': {'Result': {'$ref': '#/definitions/StringResult'}},
                                  'type': 'object'},
                    'NetworkInfo': {'description': 'NetworkInfo returns network '
                                                   'interfaces/addresses for '
                                                   'specified bindings.',
                                    'properties': {'Params': {'$ref': '#/definitions/NetworkInfoParams'},
                                                   'Result': {'$ref': '#/definitions/NetworkInfoResults'}},
                                    'type': 'object'},
                    'OpenedApplicationPortRangesByEndpoint': {'description': 'OpenedApplicationPortRangesByEndpoint '
                                                                             'returns '
                                                                             'the '
                                                                             'port '
                                                                             'ranges '
                                                                             'opened '
                                                                             'by '
                                                                             'each '
                                                                             'application.',
                                                              'properties': {'Params': {'$ref': '#/definitions/Entity'},
                                                                             'Result': {'$ref': '#/definitions/ApplicationOpenedPortsResults'}},
                                                              'type': 'object'},
                    'OpenedMachinePortRangesByEndpoint': {'description': 'OpenedMachinePortRangesByEndpoint '
                                                                         'returns '
                                                                         'the port '
                                                                         'ranges '
                                                                         'opened '
                                                                         'by each\n'
                                                                         'unit on '
                                                                         'the '
                                                                         'provided '
                                                                         'machines '
                                                                         'grouped '
                                                                         'by '
                                                                         'application '
                                                                         'endpoint.',
                                                          'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                         'Result': {'$ref': '#/definitions/OpenPortRangesByEndpointResults'}},
                                                          'type': 'object'},
                    'OpenedPortRangesByEndpoint': {'description': 'OpenedPortRangesByEndpoint '
                                                                  'returns the '
                                                                  'port ranges '
                                                                  'opened by the '
                                                                  'unit.',
                                                   'properties': {'Result': {'$ref': '#/definitions/OpenPortRangesByEndpointResults'}},
                                                   'type': 'object'},
                    'PrivateAddress': {'description': 'PrivateAddress returns the '
                                                      'private address for each '
                                                      'given unit, if set.',
                                       'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                      'Result': {'$ref': '#/definitions/StringResults'}},
                                       'type': 'object'},
                    'ProviderType': {'description': 'ProviderType returns the '
                                                    'provider type used by the '
                                                    'current juju\n'
                                                    'model.\n'
                                                    '\n'
                                                    'TODO(dimitern): Refactor the '
                                                    'uniter to call this instead '
                                                    'of calling\n'
                                                    'ModelConfig() just to get the '
                                                    'provider type. Once we have '
                                                    'machine\n'
                                                    'addresses, this might be '
                                                    'completely unnecessary '
                                                    'though.',
                                     'properties': {'Result': {'$ref': '#/definitions/StringResult'}},
                                     'type': 'object'},
                    'PublicAddress': {'description': 'PublicAddress returns the '
                                                     'public address for each '
                                                     'given unit, if set.',
                                      'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                     'Result': {'$ref': '#/definitions/StringResults'}},
                                      'type': 'object'},
                    'Read': {'description': 'Read reads leadership settings for '
                                            'the provided service ID. Any\n'
                                            'unit of the service may perform this '
                                            'operation.',
                             'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                            'Result': {'$ref': '#/definitions/GetLeadershipSettingsBulkResults'}},
                             'type': 'object'},
                    'ReadLocalApplicationSettings': {'description': 'ReadLocalApplicationSettings '
                                                                    'returns the '
                                                                    'local '
                                                                    'application '
                                                                    'settings for '
                                                                    'a\n'
                                                                    'particular '
                                                                    'relation when '
                                                                    'invoked by '
                                                                    'the leader '
                                                                    'unit.',
                                                     'properties': {'Params': {'$ref': '#/definitions/RelationUnit'},
                                                                    'Result': {'$ref': '#/definitions/SettingsResult'}},
                                                     'type': 'object'},
                    'ReadRemoteSettings': {'description': 'ReadRemoteSettings '
                                                          'returns the remote '
                                                          'settings of each given '
                                                          'set of\n'
                                                          'relation/local '
                                                          'unit/remote unit.',
                                           'properties': {'Params': {'$ref': '#/definitions/RelationUnitPairs'},
                                                          'Result': {'$ref': '#/definitions/SettingsResults'}},
                                           'type': 'object'},
                    'ReadSettings': {'description': 'ReadSettings returns the '
                                                    'local settings of each given '
                                                    'set of\n'
                                                    'relation/unit.\n'
                                                    '\n'
                                                    'NOTE(achilleasa): Using this '
                                                    'call to read application data '
                                                    'is deprecated\n'
                                                    'and will not work for k8s '
                                                    'charms (see LP1876097). '
                                                    'Instead, clients should\n'
                                                    'use '
                                                    'ReadLocalApplicationSettings.',
                                     'properties': {'Params': {'$ref': '#/definitions/RelationUnits'},
                                                    'Result': {'$ref': '#/definitions/SettingsResults'}},
                                     'type': 'object'},
                    'Refresh': {'description': 'Refresh retrieves the latest '
                                               'values for attributes on this '
                                               'unit.',
                                'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                               'Result': {'$ref': '#/definitions/UnitRefreshResults'}},
                                'type': 'object'},
                    'Relation': {'description': 'Relation returns information '
                                                'about all given relation/unit '
                                                'pairs,\n'
                                                'including their id, key and the '
                                                'local endpoint.',
                                 'properties': {'Params': {'$ref': '#/definitions/RelationUnits'},
                                                'Result': {'$ref': '#/definitions/RelationResults'}},
                                 'type': 'object'},
                    'RelationById': {'description': 'RelationById returns '
                                                    'information about all given '
                                                    'relations,\n'
                                                    'specified by their ids, '
                                                    'including their key and the '
                                                    'local\n'
                                                    'endpoint.',
                                     'properties': {'Params': {'$ref': '#/definitions/RelationIds'},
                                                    'Result': {'$ref': '#/definitions/RelationResults'}},
                                     'type': 'object'},
                    'RelationsStatus': {'description': 'RelationsStatus returns '
                                                       'for each unit the '
                                                       'corresponding relation and '
                                                       'status information.',
                                        'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                       'Result': {'$ref': '#/definitions/RelationUnitStatusResults'}},
                                        'type': 'object'},
                    'RemoveSecrets': {'description': 'RemoveSecrets removes the '
                                                     'specified secrets.',
                                      'properties': {'Params': {'$ref': '#/definitions/DeleteSecretArgs'},
                                                     'Result': {'$ref': '#/definitions/ErrorResults'}},
                                      'type': 'object'},
                    'RemoveStorageAttachments': {'description': 'RemoveStorageAttachments '
                                                                'removes the '
                                                                'specified '
                                                                'storage\n'
                                                                'attachments from '
                                                                'state.',
                                                 'properties': {'Params': {'$ref': '#/definitions/StorageAttachmentIds'},
                                                                'Result': {'$ref': '#/definitions/ErrorResults'}},
                                                 'type': 'object'},
                    'RequestReboot': {'description': 'RequestReboot sets the '
                                                     'reboot flag on the provided '
                                                     'machines',
                                      'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                     'Result': {'$ref': '#/definitions/ErrorResults'}},
                                      'type': 'object'},
                    'Resolved': {'description': 'Resolved returns the current '
                                                'resolved setting for each given '
                                                'unit.',
                                 'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                'Result': {'$ref': '#/definitions/ResolvedModeResults'}},
                                 'type': 'object'},
                    'SLALevel': {'description': "SLALevel returns the model's SLA "
                                                'level.',
                                 'properties': {'Result': {'$ref': '#/definitions/StringResult'}},
                                 'type': 'object'},
                    'SecretsGrant': {'description': 'SecretsGrant grants access to '
                                                    'a secret for the specified '
                                                    'subjects.',
                                     'properties': {'Params': {'$ref': '#/definitions/GrantRevokeSecretArgs'},
                                                    'Result': {'$ref': '#/definitions/ErrorResults'}},
                                     'type': 'object'},
                    'SecretsRevoke': {'description': 'SecretsRevoke revokes access '
                                                     'to a secret for the '
                                                     'specified subjects.',
                                      'properties': {'Params': {'$ref': '#/definitions/GrantRevokeSecretArgs'},
                                                     'Result': {'$ref': '#/definitions/ErrorResults'}},
                                      'type': 'object'},
                    'SecretsRotated': {'description': 'SecretsRotated records when '
                                                      'secrets were last rotated.',
                                       'properties': {'Params': {'$ref': '#/definitions/SecretRotatedArgs'},
                                                      'Result': {'$ref': '#/definitions/ErrorResults'}},
                                       'type': 'object'},
                    'SetAgentStatus': {'description': 'SetAgentStatus will set '
                                                      'status for agents of Units '
                                                      'passed in args, if one\n'
                                                      'of the args is not an Unit '
                                                      'it will fail.',
                                       'properties': {'Params': {'$ref': '#/definitions/SetStatus'},
                                                      'Result': {'$ref': '#/definitions/ErrorResults'}},
                                       'type': 'object'},
                    'SetApplicationStatus': {'description': 'SetApplicationStatus '
                                                            'sets the status for '
                                                            'all the Applications '
                                                            'in args if the given '
                                                            'Unit is\n'
                                                            'the leader.',
                                             'properties': {'Params': {'$ref': '#/definitions/SetStatus'},
                                                            'Result': {'$ref': '#/definitions/ErrorResults'}},
                                             'type': 'object'},
                    'SetCharmURL': {'description': 'SetCharmURL sets the charm URL '
                                                   'for each given unit. An error '
                                                   'will\n'
                                                   'be returned if a unit is dead, '
                                                   'or the charm URL is not known.',
                                    'properties': {'Params': {'$ref': '#/definitions/EntitiesCharmURL'},
                                                   'Result': {'$ref': '#/definitions/ErrorResults'}},
                                    'type': 'object'},
                    'SetRelationStatus': {'description': 'SetRelationStatus '
                                                         'updates the status of '
                                                         'the specified relations.',
                                          'properties': {'Params': {'$ref': '#/definitions/RelationStatusArgs'},
                                                         'Result': {'$ref': '#/definitions/ErrorResults'}},
                                          'type': 'object'},
                    'SetState': {'description': 'SetState sets the state persisted '
                                                'by the charm running in this '
                                                'unit\n'
                                                'and the state internal to the '
                                                'uniter for this unit.',
                                 'properties': {'Params': {'$ref': '#/definitions/SetUnitStateArgs'},
                                                'Result': {'$ref': '#/definitions/ErrorResults'}},
                                 'type': 'object'},
                    'SetStatus': {'description': 'SetStatus will set status for a '
                                                 'entities passed in args. If the '
                                                 'entity is\n'
                                                 'a Unit it will instead set '
                                                 'status to its agent, to emulate '
                                                 'backwards\n'
                                                 'compatibility.',
                                  'properties': {'Params': {'$ref': '#/definitions/SetStatus'},
                                                 'Result': {'$ref': '#/definitions/ErrorResults'}},
                                  'type': 'object'},
                    'SetUnitStatus': {'description': 'SetUnitStatus sets status '
                                                     'for all elements passed in '
                                                     'args, the difference\n'
                                                     'with SetStatus is that if an '
                                                     'entity is a Unit it will set '
                                                     'its status instead\n'
                                                     'of its agent.',
                                      'properties': {'Params': {'$ref': '#/definitions/SetStatus'},
                                                     'Result': {'$ref': '#/definitions/ErrorResults'}},
                                      'type': 'object'},
                    'SetUpgradeSeriesUnitStatus': {'description': 'SetUpgradeSeriesUnitStatus '
                                                                  'sets the '
                                                                  'upgrade series '
                                                                  'status of the '
                                                                  'unit.\n'
                                                                  'If no upgrade '
                                                                  'is in progress '
                                                                  'an error is '
                                                                  'returned '
                                                                  'instead.',
                                                   'properties': {'Params': {'$ref': '#/definitions/UpgradeSeriesStatusParams'},
                                                                  'Result': {'$ref': '#/definitions/ErrorResults'}},
                                                   'type': 'object'},
                    'SetWorkloadVersion': {'description': 'SetWorkloadVersion sets '
                                                          'the workload version '
                                                          'for each given unit. An '
                                                          'error will\n'
                                                          'be returned if a unit '
                                                          'is dead.',
                                           'properties': {'Params': {'$ref': '#/definitions/EntityWorkloadVersions'},
                                                          'Result': {'$ref': '#/definitions/ErrorResults'}},
                                           'type': 'object'},
                    'State': {'description': 'State returns the state persisted by '
                                             'the charm running in this unit\n'
                                             'and the state internal to the uniter '
                                             'for this unit.',
                              'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                             'Result': {'$ref': '#/definitions/UnitStateResults'}},
                              'type': 'object'},
                    'StorageAttachmentLife': {'description': 'StorageAttachmentLife '
                                                             'returns the '
                                                             'lifecycle state of '
                                                             'the storage '
                                                             'attachments\n'
                                                             'with the specified '
                                                             'tags.',
                                              'properties': {'Params': {'$ref': '#/definitions/StorageAttachmentIds'},
                                                             'Result': {'$ref': '#/definitions/LifeResults'}},
                                              'type': 'object'},
                    'StorageAttachments': {'description': 'StorageAttachments '
                                                          'returns the storage '
                                                          'attachments with the '
                                                          'specified tags.',
                                           'properties': {'Params': {'$ref': '#/definitions/StorageAttachmentIds'},
                                                          'Result': {'$ref': '#/definitions/StorageAttachmentResults'}},
                                           'type': 'object'},
                    'UnitStatus': {'description': 'UnitStatus returns the workload '
                                                  'status information for the '
                                                  'unit.',
                                   'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                  'Result': {'$ref': '#/definitions/StatusResults'}},
                                   'type': 'object'},
                    'UnitStorageAttachments': {'description': 'UnitStorageAttachments '
                                                              'returns the IDs of '
                                                              'storage attachments '
                                                              'for a collection of '
                                                              'units.',
                                               'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                              'Result': {'$ref': '#/definitions/StorageAttachmentIdsResults'}},
                                               'type': 'object'},
                    'UpdateNetworkInfo': {'description': 'UpdateNetworkInfo '
                                                         'refreshes the network '
                                                         "settings for a unit's "
                                                         'bound\n'
                                                         'endpoints.',
                                          'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                         'Result': {'$ref': '#/definitions/ErrorResults'}},
                                          'type': 'object'},
                    'UpdateSecrets': {'description': 'UpdateSecrets updates the '
                                                     'specified secrets.',
                                      'properties': {'Params': {'$ref': '#/definitions/UpdateSecretArgs'},
                                                     'Result': {'$ref': '#/definitions/ErrorResults'}},
                                      'type': 'object'},
                    'UpgradeSeriesUnitStatus': {'description': 'UpgradeSeriesUnitStatus '
                                                               'returns the '
                                                               'current '
                                                               'preparation status '
                                                               'of an\n'
                                                               'upgrading unit.\n'
                                                               'If no series '
                                                               'upgrade is in '
                                                               'progress an error '
                                                               'is returned '
                                                               'instead.',
                                                'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                               'Result': {'$ref': '#/definitions/UpgradeSeriesStatusResults'}},
                                                'type': 'object'},
                    'Watch': {'description': 'Watch starts an NotifyWatcher for '
                                             'each given entity.',
                              'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                             'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                              'type': 'object'},
                    'WatchAPIHostPorts': {'description': 'WatchAPIHostPorts '
                                                         'watches the API server '
                                                         'addresses.',
                                          'properties': {'Result': {'$ref': '#/definitions/NotifyWatchResult'}},
                                          'type': 'object'},
                    'WatchActionNotifications': {'description': 'WatchActionNotifications '
                                                                'returns a '
                                                                'StringsWatcher '
                                                                'for observing\n'
                                                                'incoming action '
                                                                'calls to a unit. '
                                                                'See also '
                                                                'state/watcher.go\n'
                                                                'Unit.WatchActionNotifications(). '
                                                                'This method is '
                                                                'called from\n'
                                                                'api/uniter/uniter.go '
                                                                'WatchActionNotifications().',
                                                 'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                'Result': {'$ref': '#/definitions/StringsWatchResults'}},
                                                 'type': 'object'},
                    'WatchConfigSettingsHash': {'description': 'WatchConfigSettingsHash '
                                                               'returns a '
                                                               'StringsWatcher '
                                                               'that yields a '
                                                               'hash\n'
                                                               'of the config '
                                                               'values every time '
                                                               'the config '
                                                               'changes. The '
                                                               'uniter can\n'
                                                               'save this hash and '
                                                               'use it to decide '
                                                               'whether the '
                                                               'config-changed '
                                                               'hook\n'
                                                               'needs to be run '
                                                               '(or whether this '
                                                               'was just an agent '
                                                               'restart with no\n'
                                                               'substantive config '
                                                               'change).',
                                                'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                               'Result': {'$ref': '#/definitions/StringsWatchResults'}},
                                                'type': 'object'},
                    'WatchConsumedSecretsChanges': {'description': 'WatchConsumedSecretsChanges '
                                                                   'sets up a '
                                                                   'watcher to '
                                                                   'notify of '
                                                                   'changes to '
                                                                   'secret '
                                                                   'revisions for '
                                                                   'the specified '
                                                                   'consumers.',
                                                    'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                   'Result': {'$ref': '#/definitions/StringsWatchResults'}},
                                                    'type': 'object'},
                    'WatchForModelConfigChanges': {'description': 'WatchForModelConfigChanges '
                                                                  'returns a '
                                                                  'NotifyWatcher '
                                                                  'that observes\n'
                                                                  'changes to the '
                                                                  'model '
                                                                  'configuration.\n'
                                                                  'Note that '
                                                                  'although the '
                                                                  'NotifyWatchResult '
                                                                  'contains an '
                                                                  'Error field,\n'
                                                                  "it's not used "
                                                                  'because we are '
                                                                  'only returning '
                                                                  'a single '
                                                                  'watcher,\n'
                                                                  'so we use the '
                                                                  'regular error '
                                                                  'return.',
                                                   'properties': {'Result': {'$ref': '#/definitions/NotifyWatchResult'}},
                                                   'type': 'object'},
                    'WatchInstanceData': {'description': 'WatchInstanceData is a '
                                                         'shim to call the '
                                                         'LXDProfileAPIv2 version '
                                                         'of this method.',
                                          'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                         'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                                          'type': 'object'},
                    'WatchLeadershipSettings': {'description': 'WatchLeadershipSettings '
                                                               'will block the '
                                                               'caller until '
                                                               'leadership '
                                                               'settings\n'
                                                               'for the given '
                                                               'service ID change.',
                                                'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                               'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                                                'type': 'object'},
                    'WatchMeterStatus': {'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                        'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                                         'type': 'object'},
                    'WatchObsolete': {'description': 'WatchObsolete returns a '
                                                     'watcher for notifying when:\n'
                                                     '  - a secret owned by the '
                                                     'entity is deleted\n'
                                                     '  - a secret revision owed '
                                                     'by the entity no longer\n'
                                                     '    has any consumers\n'
                                                     '\n'
                                                     'Obsolete revisions results '
                                                     'are "uri/revno" and deleted\n'
                                                     'secret results are "uri".',
                                      'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                     'Result': {'$ref': '#/definitions/StringsWatchResult'}},
                                      'type': 'object'},
                    'WatchRelationUnits': {'description': 'WatchRelationUnits '
                                                          'returns a '
                                                          'RelationUnitsWatcher '
                                                          'for observing\n'
                                                          'changes to every unit '
                                                          'in the supplied '
                                                          'relation that is '
                                                          'visible to\n'
                                                          'the supplied unit. See '
                                                          'also '
                                                          'state/watcher.go:RelationUnit.Watch().',
                                           'properties': {'Params': {'$ref': '#/definitions/RelationUnits'},
                                                          'Result': {'$ref': '#/definitions/RelationUnitsWatchResults'}},
                                           'type': 'object'},
                    'WatchSecretRevisionsExpiryChanges': {'description': 'WatchSecretRevisionsExpiryChanges '
                                                                         'sets up '
                                                                         'a '
                                                                         'watcher '
                                                                         'to '
                                                                         'notify '
                                                                         'of '
                                                                         'changes '
                                                                         'to '
                                                                         'secret '
                                                                         'revision '
                                                                         'expiry '
                                                                         'config.',
                                                          'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                         'Result': {'$ref': '#/definitions/SecretTriggerWatchResult'}},
                                                          'type': 'object'},
                    'WatchSecretsRotationChanges': {'description': 'WatchSecretsRotationChanges '
                                                                   'sets up a '
                                                                   'watcher to '
                                                                   'notify of '
                                                                   'changes to '
                                                                   'secret '
                                                                   'rotation '
                                                                   'config.',
                                                    'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                   'Result': {'$ref': '#/definitions/SecretTriggerWatchResult'}},
                                                    'type': 'object'},
                    'WatchStorageAttachments': {'description': 'WatchStorageAttachments '
                                                               'creates watchers '
                                                               'for a collection '
                                                               'of storage\n'
                                                               'attachments, each '
                                                               'of which can be '
                                                               'used to watch '
                                                               'changes to '
                                                               'storage\n'
                                                               'attachment info.',
                                                'properties': {'Params': {'$ref': '#/definitions/StorageAttachmentIds'},
                                                               'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                                                'type': 'object'},
                    'WatchTrustConfigSettingsHash': {'description': 'WatchTrustConfigSettingsHash '
                                                                    'returns a '
                                                                    'StringsWatcher '
                                                                    'that yields '
                                                                    'a\n'
                                                                    'hash of the '
                                                                    'application '
                                                                    'config values '
                                                                    'whenever they '
                                                                    'change. The\n'
                                                                    'uniter can '
                                                                    'use the hash '
                                                                    'to determine '
                                                                    'whether the '
                                                                    'actual values '
                                                                    'have\n'
                                                                    'changed since '
                                                                    'it last saw '
                                                                    'the config.',
                                                     'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                    'Result': {'$ref': '#/definitions/StringsWatchResults'}},
                                                     'type': 'object'},
                    'WatchUnitAddressesHash': {'description': 'WatchUnitAddressesHash '
                                                              'returns a '
                                                              'StringsWatcher that '
                                                              'yields the\n'
                                                              'hashes of the '
                                                              'addresses for the '
                                                              'unit whenever the '
                                                              'addresses\n'
                                                              'change. The uniter '
                                                              'can use the hash to '
                                                              'determine whether '
                                                              'the actual\n'
                                                              'address values have '
                                                              'changed since it '
                                                              'last saw the '
                                                              'config.',
                                               'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                              'Result': {'$ref': '#/definitions/StringsWatchResults'}},
                                               'type': 'object'},
                    'WatchUnitRelations': {'description': 'WatchUnitRelations '
                                                          'returns a '
                                                          'StringsWatcher, for '
                                                          'each given\n'
                                                          'unit, that notifies of '
                                                          'changes to the '
                                                          'lifecycles of '
                                                          'relations\n'
                                                          'relevant to that unit. '
                                                          'For principal units, '
                                                          'this will be all of '
                                                          'the\n'
                                                          'relations for the '
                                                          'application. For '
                                                          'subordinate units, '
                                                          'only\n'
                                                          'relations with the '
                                                          "principal unit's "
                                                          'application will be '
                                                          'monitored.',
                                           'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                          'Result': {'$ref': '#/definitions/StringsWatchResults'}},
                                           'type': 'object'},
                    'WatchUnitStorageAttachments': {'description': 'WatchUnitStorageAttachments '
                                                                   'creates '
                                                                   'watchers for a '
                                                                   'collection of '
                                                                   'units,\n'
                                                                   'each of which '
                                                                   'can be used to '
                                                                   'watch for '
                                                                   'lifecycle '
                                                                   'changes to the '
                                                                   'corresponding\n'
                                                                   "unit's storage "
                                                                   'attachments.',
                                                    'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                   'Result': {'$ref': '#/definitions/StringsWatchResults'}},
                                                    'type': 'object'},
                    'WatchUpgradeSeriesNotifications': {'description': 'WatchUpgradeSeriesNotifications '
                                                                       'returns a '
                                                                       'NotifyWatcher '
                                                                       'for '
                                                                       'observing '
                                                                       'changes to '
                                                                       'upgrade '
                                                                       'series '
                                                                       'locks.',
                                                        'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                                       'Result': {'$ref': '#/definitions/NotifyWatchResults'}},
                                                        'type': 'object'},
                    'WorkloadVersion': {'description': 'WorkloadVersion returns '
                                                       'the workload version for '
                                                       'all given units or '
                                                       'applications.',
                                        'properties': {'Params': {'$ref': '#/definitions/Entities'},
                                                       'Result': {'$ref': '#/definitions/StringResults'}},
                                        'type': 'object'}},
     'type': 'object'}
    

    @ReturnMapping(StringsResult)
    async def APIAddresses(self):
        '''
        APIAddresses returns the list of addresses used to connect to the API.


        Returns -> StringsResult
        '''

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='APIAddresses',
                   version=18,
                   params=_params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(APIHostPortsResult)
    async def APIHostPorts(self):
        '''
        APIHostPorts returns the API server addresses.


        Returns -> APIHostPortsResult
        '''

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='APIHostPorts',
                   version=18,
                   params=_params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def ActionStatus(self, entities=None):
        '''
        ActionStatus returns the status of Actions by Tags passed in.

        entities : typing.Sequence[~Entity]
        Returns -> StringResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='ActionStatus',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ActionResults)
    async def Actions(self, entities=None):
        '''
        Actions returns the Actions by Tags passed and ensures that the Unit asking
        for them is the same Unit that has the Actions.

        entities : typing.Sequence[~Entity]
        Returns -> ActionResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='Actions',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def AddMetricBatches(self, batches=None):
        '''
        AddMetricBatches adds the metrics for the specified unit.

        batches : typing.Sequence[~MetricBatchParam]
        Returns -> ErrorResults
        '''
        if batches is not None and not isinstance(batches, (bytes, str, list)):
            raise Exception("Expected batches to be a Sequence, received: {}".format(type(batches)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='AddMetricBatches',
                   version=18,
                   params=_params)
        _params['batches'] = batches
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ApplicationStatusResults)
    async def ApplicationStatus(self, entities=None):
        '''
        ApplicationStatus returns the status of the Applications and its workloads
        if the given unit is the leader.

        entities : typing.Sequence[~Entity]
        Returns -> ApplicationStatusResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='ApplicationStatus',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def AssignedMachine(self, entities=None):
        '''
        AssignedMachine returns the machine tag for each given unit tag, or
        an error satisfying params.IsCodeNotAssigned when a unit has no
        assigned machine.

        entities : typing.Sequence[~Entity]
        Returns -> StringResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='AssignedMachine',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def AvailabilityZone(self, entities=None):
        '''
        AvailabilityZone returns the availability zone for each given unit, if applicable.

        entities : typing.Sequence[~Entity]
        Returns -> StringResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='AvailabilityZone',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def BeginActions(self, entities=None):
        '''
        BeginActions marks the actions represented by the passed in Tags as running.

        entities : typing.Sequence[~Entity]
        Returns -> ErrorResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='BeginActions',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(BoolResults)
    async def CanApplyLXDProfile(self, entities=None):
        '''
        CanApplyLXDProfile is a shim to call the LXDProfileAPIv2 version of this method.

        entities : typing.Sequence[~Entity]
        Returns -> BoolResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='CanApplyLXDProfile',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def CharmArchiveSha256(self, urls=None):
        '''
        CharmArchiveSha256 returns the SHA256 digest of the charm archive
        (bundle) data for each charm url in the given parameters.

        urls : typing.Sequence[~CharmURL]
        Returns -> StringResults
        '''
        if urls is not None and not isinstance(urls, (bytes, str, list)):
            raise Exception("Expected urls to be a Sequence, received: {}".format(type(urls)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='CharmArchiveSha256',
                   version=18,
                   params=_params)
        _params['urls'] = urls
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(IntResults)
    async def CharmModifiedVersion(self, entities=None):
        '''
        CharmModifiedVersion returns the most CharmModifiedVersion for all given
        units or applications.

        entities : typing.Sequence[~Entity]
        Returns -> IntResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='CharmModifiedVersion',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringBoolResults)
    async def CharmURL(self, entities=None):
        '''
        CharmURL returns the charm URL for all given units or applications.

        entities : typing.Sequence[~Entity]
        Returns -> StringBoolResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='CharmURL',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def ClearResolved(self, entities=None):
        '''
        ClearResolved removes any resolved setting from each given unit.

        entities : typing.Sequence[~Entity]
        Returns -> ErrorResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='ClearResolved',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResult)
    async def CloudAPIVersion(self):
        '''
        CloudAPIVersion returns the cloud API version, if available.


        Returns -> StringResult
        '''

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='CloudAPIVersion',
                   version=18,
                   params=_params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(CloudSpecResult)
    async def CloudSpec(self):
        '''
        CloudSpec returns the cloud spec used by the model in which the
        authenticated unit or application resides.
        A check is made beforehand to ensure that the request is made by an entity
        that has been granted the appropriate trust.


        Returns -> CloudSpecResult
        '''

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='CloudSpec',
                   version=18,
                   params=_params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def CommitHookChanges(self, args=None):
        '''
        CommitHookChanges batches together all required API calls for applying
        a set of changes after a hook successfully completes and executes them in a
        single transaction.

        args : typing.Sequence[~CommitHookChangesArg]
        Returns -> ErrorResults
        '''
        if args is not None and not isinstance(args, (bytes, str, list)):
            raise Exception("Expected args to be a Sequence, received: {}".format(type(args)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='CommitHookChanges',
                   version=18,
                   params=_params)
        _params['args'] = args
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ConfigSettingsResults)
    async def ConfigSettings(self, entities=None):
        '''
        ConfigSettings returns the complete set of application charm config
        settings available to each given unit.

        entities : typing.Sequence[~Entity]
        Returns -> ConfigSettingsResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='ConfigSettings',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def CreateSecretURIs(self, count=None):
        '''
        CreateSecretURIs creates new secret URIs.

        count : int
        Returns -> StringResults
        '''
        if count is not None and not isinstance(count, int):
            raise Exception("Expected count to be a int, received: {}".format(type(count)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='CreateSecretURIs',
                   version=18,
                   params=_params)
        _params['count'] = count
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def CreateSecrets(self, args=None):
        '''
        CreateSecrets creates new secrets.

        args : typing.Sequence[~CreateSecretArg]
        Returns -> StringResults
        '''
        if args is not None and not isinstance(args, (bytes, str, list)):
            raise Exception("Expected args to be a Sequence, received: {}".format(type(args)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='CreateSecrets',
                   version=18,
                   params=_params)
        _params['args'] = args
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ModelResult)
    async def CurrentModel(self):
        '''
        CurrentModel returns the name and UUID for the current juju model.


        Returns -> ModelResult
        '''

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='CurrentModel',
                   version=18,
                   params=_params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def Destroy(self, entities=None):
        '''
        Destroy advances all given Alive units' lifecycles as far as
        possible. See state/Unit.Destroy().

        entities : typing.Sequence[~Entity]
        Returns -> ErrorResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='Destroy',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def DestroyAllSubordinates(self, entities=None):
        '''
        DestroyAllSubordinates destroys all subordinates of each given unit.

        entities : typing.Sequence[~Entity]
        Returns -> ErrorResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='DestroyAllSubordinates',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def DestroyUnitStorageAttachments(self, entities=None):
        '''
        DestroyUnitStorageAttachments marks each storage attachment of the
        specified units as Dying.

        entities : typing.Sequence[~Entity]
        Returns -> ErrorResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='DestroyUnitStorageAttachments',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def EnsureDead(self, entities=None):
        '''
        EnsureDead calls EnsureDead on each given entity from state. It
        will fail if the entity is not present. If it's Alive, nothing will
        happen (see state/EnsureDead() for units or machines).

        entities : typing.Sequence[~Entity]
        Returns -> ErrorResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='EnsureDead',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def EnterScope(self, relation_units=None):
        '''
        EnterScope ensures each unit has entered its scope in the relation,
        for all of the given relation/unit pairs. See also
        state.RelationUnit.EnterScope().

        relation_units : typing.Sequence[~RelationUnit]
        Returns -> ErrorResults
        '''
        if relation_units is not None and not isinstance(relation_units, (bytes, str, list)):
            raise Exception("Expected relation_units to be a Sequence, received: {}".format(type(relation_units)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='EnterScope',
                   version=18,
                   params=_params)
        _params['relation-units'] = relation_units
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def FinishActions(self, results=None):
        '''
        FinishActions saves the result of a completed Action

        results : typing.Sequence[~ActionExecutionResult]
        Returns -> ErrorResults
        '''
        if results is not None and not isinstance(results, (bytes, str, list)):
            raise Exception("Expected results to be a Sequence, received: {}".format(type(results)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='FinishActions',
                   version=18,
                   params=_params)
        _params['results'] = results
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(SecretConsumerInfoResults)
    async def GetConsumerSecretsRevisionInfo(self, consumer_tag=None, uris=None):
        '''
        GetConsumerSecretsRevisionInfo returns the latest secret revisions for the specified secrets.
        This facade method is used for remote watcher to get the latest secret revisions and labels for a secret changed hook.

        consumer_tag : str
        uris : typing.Sequence[str]
        Returns -> SecretConsumerInfoResults
        '''
        if consumer_tag is not None and not isinstance(consumer_tag, (bytes, str)):
            raise Exception("Expected consumer_tag to be a str, received: {}".format(type(consumer_tag)))

        if uris is not None and not isinstance(uris, (bytes, str, list)):
            raise Exception("Expected uris to be a Sequence, received: {}".format(type(uris)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='GetConsumerSecretsRevisionInfo',
                   version=18,
                   params=_params)
        _params['consumer-tag'] = consumer_tag
        _params['uris'] = uris
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(MeterStatusResults)
    async def GetMeterStatus(self, entities=None):
        '''
        entities : typing.Sequence[~Entity]
        Returns -> MeterStatusResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='GetMeterStatus',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def GetPodSpec(self, entities=None):
        '''
        GetPodSpec gets the pod specs for a set of applications.

        entities : typing.Sequence[~Entity]
        Returns -> StringResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='GetPodSpec',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringBoolResults)
    async def GetPrincipal(self, entities=None):
        '''
        GetPrincipal returns the result of calling PrincipalName() and
        converting it to a tag, on each given unit.

        entities : typing.Sequence[~Entity]
        Returns -> StringBoolResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='GetPrincipal',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def GetRawK8sSpec(self, entities=None):
        '''
        GetRawK8sSpec gets the raw k8s specs for a set of applications.

        entities : typing.Sequence[~Entity]
        Returns -> StringResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='GetRawK8sSpec',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(SecretBackendConfigResults)
    async def GetSecretBackendConfigs(self, backend_ids=None):
        '''
        GetSecretBackendConfigs gets the config needed to create a client to secret backends.

        backend_ids : typing.Sequence[str]
        Returns -> SecretBackendConfigResults
        '''
        if backend_ids is not None and not isinstance(backend_ids, (bytes, str, list)):
            raise Exception("Expected backend_ids to be a Sequence, received: {}".format(type(backend_ids)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='GetSecretBackendConfigs',
                   version=18,
                   params=_params)
        _params['backend-ids'] = backend_ids
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(SecretContentResults)
    async def GetSecretContentInfo(self, args=None):
        '''
        GetSecretContentInfo returns the secret values for the specified secrets.

        args : typing.Sequence[~GetSecretContentArg]
        Returns -> SecretContentResults
        '''
        if args is not None and not isinstance(args, (bytes, str, list)):
            raise Exception("Expected args to be a Sequence, received: {}".format(type(args)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='GetSecretContentInfo',
                   version=18,
                   params=_params)
        _params['args'] = args
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ListSecretResults)
    async def GetSecretMetadata(self):
        '''
        GetSecretMetadata returns metadata for the caller's secrets.


        Returns -> ListSecretResults
        '''

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='GetSecretMetadata',
                   version=18,
                   params=_params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(SecretContentResults)
    async def GetSecretRevisionContentInfo(self, pending_delete=None, revisions=None, uri=None):
        '''
        GetSecretRevisionContentInfo returns the secret values for the specified secret revisions.

        pending_delete : bool
        revisions : typing.Sequence[int]
        uri : str
        Returns -> SecretContentResults
        '''
        if pending_delete is not None and not isinstance(pending_delete, bool):
            raise Exception("Expected pending_delete to be a bool, received: {}".format(type(pending_delete)))

        if revisions is not None and not isinstance(revisions, (bytes, str, list)):
            raise Exception("Expected revisions to be a Sequence, received: {}".format(type(revisions)))

        if uri is not None and not isinstance(uri, (bytes, str)):
            raise Exception("Expected uri to be a str, received: {}".format(type(uri)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='GetSecretRevisionContentInfo',
                   version=18,
                   params=_params)
        _params['pending-delete'] = pending_delete
        _params['revisions'] = revisions
        _params['uri'] = uri
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(GoalStateResults)
    async def GoalStates(self, entities=None):
        '''
        GoalStates returns information of charm units and relations.

        entities : typing.Sequence[~Entity]
        Returns -> GoalStateResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='GoalStates',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(BoolResults)
    async def HasSubordinates(self, entities=None):
        '''
        HasSubordinates returns the whether each given unit has any subordinates.

        entities : typing.Sequence[~Entity]
        Returns -> BoolResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='HasSubordinates',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def LXDProfileName(self, entities=None):
        '''
        LXDProfileName is a shim to call the LXDProfileAPIv2 version of this method.

        entities : typing.Sequence[~Entity]
        Returns -> StringResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='LXDProfileName',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(BoolResults)
    async def LXDProfileRequired(self, urls=None):
        '''
        LXDProfileRequired is a shim to call the LXDProfileAPIv2 version of this method.

        urls : typing.Sequence[~CharmURL]
        Returns -> BoolResults
        '''
        if urls is not None and not isinstance(urls, (bytes, str, list)):
            raise Exception("Expected urls to be a Sequence, received: {}".format(type(urls)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='LXDProfileRequired',
                   version=18,
                   params=_params)
        _params['urls'] = urls
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def LeaveScope(self, relation_units=None):
        '''
        LeaveScope signals each unit has left its scope in the relation,
        for all of the given relation/unit pairs. See also
        state.RelationUnit.LeaveScope().

        relation_units : typing.Sequence[~RelationUnit]
        Returns -> ErrorResults
        '''
        if relation_units is not None and not isinstance(relation_units, (bytes, str, list)):
            raise Exception("Expected relation_units to be a Sequence, received: {}".format(type(relation_units)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='LeaveScope',
                   version=18,
                   params=_params)
        _params['relation-units'] = relation_units
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(LifeResults)
    async def Life(self, entities=None):
        '''
        Life returns the life status of every supplied entity, where available.

        entities : typing.Sequence[~Entity]
        Returns -> LifeResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='Life',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def LogActionsMessages(self, messages=None):
        '''
        LogActionsMessages records the log messages against the specified actions.

        messages : typing.Sequence[~EntityString]
        Returns -> ErrorResults
        '''
        if messages is not None and not isinstance(messages, (bytes, str, list)):
            raise Exception("Expected messages to be a Sequence, received: {}".format(type(messages)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='LogActionsMessages',
                   version=18,
                   params=_params)
        _params['messages'] = messages
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def Merge(self, params=None):
        '''
        Merge merges in the provided leadership settings. Only leaders for
        the given service may perform this operation.

        params : typing.Sequence[~MergeLeadershipSettingsParam]
        Returns -> ErrorResults
        '''
        if params is not None and not isinstance(params, (bytes, str, list)):
            raise Exception("Expected params to be a Sequence, received: {}".format(type(params)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='Merge',
                   version=18,
                   params=_params)
        _params['params'] = params
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ModelConfigResult)
    async def ModelConfig(self):
        '''
        ModelConfig returns the current model's configuration.


        Returns -> ModelConfigResult
        '''

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='ModelConfig',
                   version=18,
                   params=_params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResult)
    async def ModelUUID(self):
        '''
        ModelUUID returns the model UUID that this unit resides in.
        It is implemented here directly as a result of removing it from
        embedded APIAddresser *without* bumping the facade version.
        It should be blanked when this facade version is next incremented.


        Returns -> StringResult
        '''

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='ModelUUID',
                   version=18,
                   params=_params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NetworkInfoResults)
    async def NetworkInfo(self, bindings=None, relation_id=None, unit=None):
        '''
        NetworkInfo returns network interfaces/addresses for specified bindings.

        bindings : typing.Sequence[str]
        relation_id : int
        unit : str
        Returns -> NetworkInfoResults
        '''
        if bindings is not None and not isinstance(bindings, (bytes, str, list)):
            raise Exception("Expected bindings to be a Sequence, received: {}".format(type(bindings)))

        if relation_id is not None and not isinstance(relation_id, int):
            raise Exception("Expected relation_id to be a int, received: {}".format(type(relation_id)))

        if unit is not None and not isinstance(unit, (bytes, str)):
            raise Exception("Expected unit to be a str, received: {}".format(type(unit)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='NetworkInfo',
                   version=18,
                   params=_params)
        _params['bindings'] = bindings
        _params['relation-id'] = relation_id
        _params['unit'] = unit
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ApplicationOpenedPortsResults)
    async def OpenedApplicationPortRangesByEndpoint(self, tag=None):
        '''
        OpenedApplicationPortRangesByEndpoint returns the port ranges opened by each application.

        tag : str
        Returns -> ApplicationOpenedPortsResults
        '''
        if tag is not None and not isinstance(tag, (bytes, str)):
            raise Exception("Expected tag to be a str, received: {}".format(type(tag)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='OpenedApplicationPortRangesByEndpoint',
                   version=18,
                   params=_params)
        _params['tag'] = tag
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(OpenPortRangesByEndpointResults)
    async def OpenedMachinePortRangesByEndpoint(self, entities=None):
        '''
        OpenedMachinePortRangesByEndpoint returns the port ranges opened by each
        unit on the provided machines grouped by application endpoint.

        entities : typing.Sequence[~Entity]
        Returns -> OpenPortRangesByEndpointResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='OpenedMachinePortRangesByEndpoint',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(OpenPortRangesByEndpointResults)
    async def OpenedPortRangesByEndpoint(self):
        '''
        OpenedPortRangesByEndpoint returns the port ranges opened by the unit.


        Returns -> OpenPortRangesByEndpointResults
        '''

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='OpenedPortRangesByEndpoint',
                   version=18,
                   params=_params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def PrivateAddress(self, entities=None):
        '''
        PrivateAddress returns the private address for each given unit, if set.

        entities : typing.Sequence[~Entity]
        Returns -> StringResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='PrivateAddress',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResult)
    async def ProviderType(self):
        '''
        ProviderType returns the provider type used by the current juju
        model.

        TODO(dimitern): Refactor the uniter to call this instead of calling
        ModelConfig() just to get the provider type. Once we have machine
        addresses, this might be completely unnecessary though.


        Returns -> StringResult
        '''

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='ProviderType',
                   version=18,
                   params=_params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def PublicAddress(self, entities=None):
        '''
        PublicAddress returns the public address for each given unit, if set.

        entities : typing.Sequence[~Entity]
        Returns -> StringResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='PublicAddress',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(GetLeadershipSettingsBulkResults)
    async def Read(self, entities=None):
        '''
        Read reads leadership settings for the provided service ID. Any
        unit of the service may perform this operation.

        entities : typing.Sequence[~Entity]
        Returns -> GetLeadershipSettingsBulkResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='Read',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(SettingsResult)
    async def ReadLocalApplicationSettings(self, relation=None, unit=None):
        '''
        ReadLocalApplicationSettings returns the local application settings for a
        particular relation when invoked by the leader unit.

        relation : str
        unit : str
        Returns -> SettingsResult
        '''
        if relation is not None and not isinstance(relation, (bytes, str)):
            raise Exception("Expected relation to be a str, received: {}".format(type(relation)))

        if unit is not None and not isinstance(unit, (bytes, str)):
            raise Exception("Expected unit to be a str, received: {}".format(type(unit)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='ReadLocalApplicationSettings',
                   version=18,
                   params=_params)
        _params['relation'] = relation
        _params['unit'] = unit
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(SettingsResults)
    async def ReadRemoteSettings(self, relation_unit_pairs=None):
        '''
        ReadRemoteSettings returns the remote settings of each given set of
        relation/local unit/remote unit.

        relation_unit_pairs : typing.Sequence[~RelationUnitPair]
        Returns -> SettingsResults
        '''
        if relation_unit_pairs is not None and not isinstance(relation_unit_pairs, (bytes, str, list)):
            raise Exception("Expected relation_unit_pairs to be a Sequence, received: {}".format(type(relation_unit_pairs)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='ReadRemoteSettings',
                   version=18,
                   params=_params)
        _params['relation-unit-pairs'] = relation_unit_pairs
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(SettingsResults)
    async def ReadSettings(self, relation_units=None):
        '''
        ReadSettings returns the local settings of each given set of
        relation/unit.

        NOTE(achilleasa): Using this call to read application data is deprecated
        and will not work for k8s charms (see LP1876097). Instead, clients should
        use ReadLocalApplicationSettings.

        relation_units : typing.Sequence[~RelationUnit]
        Returns -> SettingsResults
        '''
        if relation_units is not None and not isinstance(relation_units, (bytes, str, list)):
            raise Exception("Expected relation_units to be a Sequence, received: {}".format(type(relation_units)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='ReadSettings',
                   version=18,
                   params=_params)
        _params['relation-units'] = relation_units
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(UnitRefreshResults)
    async def Refresh(self, entities=None):
        '''
        Refresh retrieves the latest values for attributes on this unit.

        entities : typing.Sequence[~Entity]
        Returns -> UnitRefreshResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='Refresh',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(RelationResults)
    async def Relation(self, relation_units=None):
        '''
        Relation returns information about all given relation/unit pairs,
        including their id, key and the local endpoint.

        relation_units : typing.Sequence[~RelationUnit]
        Returns -> RelationResults
        '''
        if relation_units is not None and not isinstance(relation_units, (bytes, str, list)):
            raise Exception("Expected relation_units to be a Sequence, received: {}".format(type(relation_units)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='Relation',
                   version=18,
                   params=_params)
        _params['relation-units'] = relation_units
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(RelationResults)
    async def RelationById(self, relation_ids=None):
        '''
        RelationById returns information about all given relations,
        specified by their ids, including their key and the local
        endpoint.

        relation_ids : typing.Sequence[int]
        Returns -> RelationResults
        '''
        if relation_ids is not None and not isinstance(relation_ids, (bytes, str, list)):
            raise Exception("Expected relation_ids to be a Sequence, received: {}".format(type(relation_ids)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='RelationById',
                   version=18,
                   params=_params)
        _params['relation-ids'] = relation_ids
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(RelationUnitStatusResults)
    async def RelationsStatus(self, entities=None):
        '''
        RelationsStatus returns for each unit the corresponding relation and status information.

        entities : typing.Sequence[~Entity]
        Returns -> RelationUnitStatusResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='RelationsStatus',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def RemoveSecrets(self, args=None):
        '''
        RemoveSecrets removes the specified secrets.

        args : typing.Sequence[~DeleteSecretArg]
        Returns -> ErrorResults
        '''
        if args is not None and not isinstance(args, (bytes, str, list)):
            raise Exception("Expected args to be a Sequence, received: {}".format(type(args)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='RemoveSecrets',
                   version=18,
                   params=_params)
        _params['args'] = args
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def RemoveStorageAttachments(self, ids=None):
        '''
        RemoveStorageAttachments removes the specified storage
        attachments from state.

        ids : typing.Sequence[~StorageAttachmentId]
        Returns -> ErrorResults
        '''
        if ids is not None and not isinstance(ids, (bytes, str, list)):
            raise Exception("Expected ids to be a Sequence, received: {}".format(type(ids)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='RemoveStorageAttachments',
                   version=18,
                   params=_params)
        _params['ids'] = ids
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def RequestReboot(self, entities=None):
        '''
        RequestReboot sets the reboot flag on the provided machines

        entities : typing.Sequence[~Entity]
        Returns -> ErrorResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='RequestReboot',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ResolvedModeResults)
    async def Resolved(self, entities=None):
        '''
        Resolved returns the current resolved setting for each given unit.

        entities : typing.Sequence[~Entity]
        Returns -> ResolvedModeResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='Resolved',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResult)
    async def SLALevel(self):
        '''
        SLALevel returns the model's SLA level.


        Returns -> StringResult
        '''

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='SLALevel',
                   version=18,
                   params=_params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SecretsGrant(self, args=None):
        '''
        SecretsGrant grants access to a secret for the specified subjects.

        args : typing.Sequence[~GrantRevokeSecretArg]
        Returns -> ErrorResults
        '''
        if args is not None and not isinstance(args, (bytes, str, list)):
            raise Exception("Expected args to be a Sequence, received: {}".format(type(args)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='SecretsGrant',
                   version=18,
                   params=_params)
        _params['args'] = args
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SecretsRevoke(self, args=None):
        '''
        SecretsRevoke revokes access to a secret for the specified subjects.

        args : typing.Sequence[~GrantRevokeSecretArg]
        Returns -> ErrorResults
        '''
        if args is not None and not isinstance(args, (bytes, str, list)):
            raise Exception("Expected args to be a Sequence, received: {}".format(type(args)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='SecretsRevoke',
                   version=18,
                   params=_params)
        _params['args'] = args
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SecretsRotated(self, args=None):
        '''
        SecretsRotated records when secrets were last rotated.

        args : typing.Sequence[~SecretRotatedArg]
        Returns -> ErrorResults
        '''
        if args is not None and not isinstance(args, (bytes, str, list)):
            raise Exception("Expected args to be a Sequence, received: {}".format(type(args)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='SecretsRotated',
                   version=18,
                   params=_params)
        _params['args'] = args
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetAgentStatus(self, entities=None):
        '''
        SetAgentStatus will set status for agents of Units passed in args, if one
        of the args is not an Unit it will fail.

        entities : typing.Sequence[~EntityStatusArgs]
        Returns -> ErrorResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='SetAgentStatus',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetApplicationStatus(self, entities=None):
        '''
        SetApplicationStatus sets the status for all the Applications in args if the given Unit is
        the leader.

        entities : typing.Sequence[~EntityStatusArgs]
        Returns -> ErrorResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='SetApplicationStatus',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetCharmURL(self, entities=None):
        '''
        SetCharmURL sets the charm URL for each given unit. An error will
        be returned if a unit is dead, or the charm URL is not known.

        entities : typing.Sequence[~EntityCharmURL]
        Returns -> ErrorResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='SetCharmURL',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetRelationStatus(self, args=None):
        '''
        SetRelationStatus updates the status of the specified relations.

        args : typing.Sequence[~RelationStatusArg]
        Returns -> ErrorResults
        '''
        if args is not None and not isinstance(args, (bytes, str, list)):
            raise Exception("Expected args to be a Sequence, received: {}".format(type(args)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='SetRelationStatus',
                   version=18,
                   params=_params)
        _params['args'] = args
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetState(self, args=None):
        '''
        SetState sets the state persisted by the charm running in this unit
        and the state internal to the uniter for this unit.

        args : typing.Sequence[~SetUnitStateArg]
        Returns -> ErrorResults
        '''
        if args is not None and not isinstance(args, (bytes, str, list)):
            raise Exception("Expected args to be a Sequence, received: {}".format(type(args)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='SetState',
                   version=18,
                   params=_params)
        _params['args'] = args
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetStatus(self, entities=None):
        '''
        SetStatus will set status for a entities passed in args. If the entity is
        a Unit it will instead set status to its agent, to emulate backwards
        compatibility.

        entities : typing.Sequence[~EntityStatusArgs]
        Returns -> ErrorResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='SetStatus',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetUnitStatus(self, entities=None):
        '''
        SetUnitStatus sets status for all elements passed in args, the difference
        with SetStatus is that if an entity is a Unit it will set its status instead
        of its agent.

        entities : typing.Sequence[~EntityStatusArgs]
        Returns -> ErrorResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='SetUnitStatus',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetUpgradeSeriesUnitStatus(self, params=None):
        '''
        SetUpgradeSeriesUnitStatus sets the upgrade series status of the unit.
        If no upgrade is in progress an error is returned instead.

        params : typing.Sequence[~UpgradeSeriesStatusParam]
        Returns -> ErrorResults
        '''
        if params is not None and not isinstance(params, (bytes, str, list)):
            raise Exception("Expected params to be a Sequence, received: {}".format(type(params)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='SetUpgradeSeriesUnitStatus',
                   version=18,
                   params=_params)
        _params['params'] = params
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def SetWorkloadVersion(self, entities=None):
        '''
        SetWorkloadVersion sets the workload version for each given unit. An error will
        be returned if a unit is dead.

        entities : typing.Sequence[~EntityWorkloadVersion]
        Returns -> ErrorResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='SetWorkloadVersion',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(UnitStateResults)
    async def State(self, entities=None):
        '''
        State returns the state persisted by the charm running in this unit
        and the state internal to the uniter for this unit.

        entities : typing.Sequence[~Entity]
        Returns -> UnitStateResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='State',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(LifeResults)
    async def StorageAttachmentLife(self, ids=None):
        '''
        StorageAttachmentLife returns the lifecycle state of the storage attachments
        with the specified tags.

        ids : typing.Sequence[~StorageAttachmentId]
        Returns -> LifeResults
        '''
        if ids is not None and not isinstance(ids, (bytes, str, list)):
            raise Exception("Expected ids to be a Sequence, received: {}".format(type(ids)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='StorageAttachmentLife',
                   version=18,
                   params=_params)
        _params['ids'] = ids
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StorageAttachmentResults)
    async def StorageAttachments(self, ids=None):
        '''
        StorageAttachments returns the storage attachments with the specified tags.

        ids : typing.Sequence[~StorageAttachmentId]
        Returns -> StorageAttachmentResults
        '''
        if ids is not None and not isinstance(ids, (bytes, str, list)):
            raise Exception("Expected ids to be a Sequence, received: {}".format(type(ids)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='StorageAttachments',
                   version=18,
                   params=_params)
        _params['ids'] = ids
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StatusResults)
    async def UnitStatus(self, entities=None):
        '''
        UnitStatus returns the workload status information for the unit.

        entities : typing.Sequence[~Entity]
        Returns -> StatusResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='UnitStatus',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StorageAttachmentIdsResults)
    async def UnitStorageAttachments(self, entities=None):
        '''
        UnitStorageAttachments returns the IDs of storage attachments for a collection of units.

        entities : typing.Sequence[~Entity]
        Returns -> StorageAttachmentIdsResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='UnitStorageAttachments',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def UpdateNetworkInfo(self, entities=None):
        '''
        UpdateNetworkInfo refreshes the network settings for a unit's bound
        endpoints.

        entities : typing.Sequence[~Entity]
        Returns -> ErrorResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='UpdateNetworkInfo',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(ErrorResults)
    async def UpdateSecrets(self, args=None):
        '''
        UpdateSecrets updates the specified secrets.

        args : typing.Sequence[~UpdateSecretArg]
        Returns -> ErrorResults
        '''
        if args is not None and not isinstance(args, (bytes, str, list)):
            raise Exception("Expected args to be a Sequence, received: {}".format(type(args)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='UpdateSecrets',
                   version=18,
                   params=_params)
        _params['args'] = args
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(UpgradeSeriesStatusResults)
    async def UpgradeSeriesUnitStatus(self, entities=None):
        '''
        UpgradeSeriesUnitStatus returns the current preparation status of an
        upgrading unit.
        If no series upgrade is in progress an error is returned instead.

        entities : typing.Sequence[~Entity]
        Returns -> UpgradeSeriesStatusResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='UpgradeSeriesUnitStatus',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def Watch(self, entities=None):
        '''
        Watch starts an NotifyWatcher for each given entity.

        entities : typing.Sequence[~Entity]
        Returns -> NotifyWatchResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='Watch',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResult)
    async def WatchAPIHostPorts(self):
        '''
        WatchAPIHostPorts watches the API server addresses.


        Returns -> NotifyWatchResult
        '''

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='WatchAPIHostPorts',
                   version=18,
                   params=_params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResults)
    async def WatchActionNotifications(self, entities=None):
        '''
        WatchActionNotifications returns a StringsWatcher for observing
        incoming action calls to a unit. See also state/watcher.go
        Unit.WatchActionNotifications(). This method is called from
        api/uniter/uniter.go WatchActionNotifications().

        entities : typing.Sequence[~Entity]
        Returns -> StringsWatchResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='WatchActionNotifications',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResults)
    async def WatchConfigSettingsHash(self, entities=None):
        '''
        WatchConfigSettingsHash returns a StringsWatcher that yields a hash
        of the config values every time the config changes. The uniter can
        save this hash and use it to decide whether the config-changed hook
        needs to be run (or whether this was just an agent restart with no
        substantive config change).

        entities : typing.Sequence[~Entity]
        Returns -> StringsWatchResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='WatchConfigSettingsHash',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResults)
    async def WatchConsumedSecretsChanges(self, entities=None):
        '''
        WatchConsumedSecretsChanges sets up a watcher to notify of changes to secret revisions for the specified consumers.

        entities : typing.Sequence[~Entity]
        Returns -> StringsWatchResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='WatchConsumedSecretsChanges',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResult)
    async def WatchForModelConfigChanges(self):
        '''
        WatchForModelConfigChanges returns a NotifyWatcher that observes
        changes to the model configuration.
        Note that although the NotifyWatchResult contains an Error field,
        it's not used because we are only returning a single watcher,
        so we use the regular error return.


        Returns -> NotifyWatchResult
        '''

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='WatchForModelConfigChanges',
                   version=18,
                   params=_params)

        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def WatchInstanceData(self, entities=None):
        '''
        WatchInstanceData is a shim to call the LXDProfileAPIv2 version of this method.

        entities : typing.Sequence[~Entity]
        Returns -> NotifyWatchResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='WatchInstanceData',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def WatchLeadershipSettings(self, entities=None):
        '''
        WatchLeadershipSettings will block the caller until leadership settings
        for the given service ID change.

        entities : typing.Sequence[~Entity]
        Returns -> NotifyWatchResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='WatchLeadershipSettings',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def WatchMeterStatus(self, entities=None):
        '''
        entities : typing.Sequence[~Entity]
        Returns -> NotifyWatchResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='WatchMeterStatus',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResult)
    async def WatchObsolete(self, entities=None):
        '''
        WatchObsolete returns a watcher for notifying when:
          - a secret owned by the entity is deleted
          - a secret revision owed by the entity no longer
            has any consumers

        Obsolete revisions results are "uri/revno" and deleted
        secret results are "uri".

        entities : typing.Sequence[~Entity]
        Returns -> StringsWatchResult
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='WatchObsolete',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(RelationUnitsWatchResults)
    async def WatchRelationUnits(self, relation_units=None):
        '''
        WatchRelationUnits returns a RelationUnitsWatcher for observing
        changes to every unit in the supplied relation that is visible to
        the supplied unit. See also state/watcher.go:RelationUnit.Watch().

        relation_units : typing.Sequence[~RelationUnit]
        Returns -> RelationUnitsWatchResults
        '''
        if relation_units is not None and not isinstance(relation_units, (bytes, str, list)):
            raise Exception("Expected relation_units to be a Sequence, received: {}".format(type(relation_units)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='WatchRelationUnits',
                   version=18,
                   params=_params)
        _params['relation-units'] = relation_units
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(SecretTriggerWatchResult)
    async def WatchSecretRevisionsExpiryChanges(self, entities=None):
        '''
        WatchSecretRevisionsExpiryChanges sets up a watcher to notify of changes to secret revision expiry config.

        entities : typing.Sequence[~Entity]
        Returns -> SecretTriggerWatchResult
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='WatchSecretRevisionsExpiryChanges',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(SecretTriggerWatchResult)
    async def WatchSecretsRotationChanges(self, entities=None):
        '''
        WatchSecretsRotationChanges sets up a watcher to notify of changes to secret rotation config.

        entities : typing.Sequence[~Entity]
        Returns -> SecretTriggerWatchResult
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='WatchSecretsRotationChanges',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def WatchStorageAttachments(self, ids=None):
        '''
        WatchStorageAttachments creates watchers for a collection of storage
        attachments, each of which can be used to watch changes to storage
        attachment info.

        ids : typing.Sequence[~StorageAttachmentId]
        Returns -> NotifyWatchResults
        '''
        if ids is not None and not isinstance(ids, (bytes, str, list)):
            raise Exception("Expected ids to be a Sequence, received: {}".format(type(ids)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='WatchStorageAttachments',
                   version=18,
                   params=_params)
        _params['ids'] = ids
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResults)
    async def WatchTrustConfigSettingsHash(self, entities=None):
        '''
        WatchTrustConfigSettingsHash returns a StringsWatcher that yields a
        hash of the application config values whenever they change. The
        uniter can use the hash to determine whether the actual values have
        changed since it last saw the config.

        entities : typing.Sequence[~Entity]
        Returns -> StringsWatchResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='WatchTrustConfigSettingsHash',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResults)
    async def WatchUnitAddressesHash(self, entities=None):
        '''
        WatchUnitAddressesHash returns a StringsWatcher that yields the
        hashes of the addresses for the unit whenever the addresses
        change. The uniter can use the hash to determine whether the actual
        address values have changed since it last saw the config.

        entities : typing.Sequence[~Entity]
        Returns -> StringsWatchResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='WatchUnitAddressesHash',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResults)
    async def WatchUnitRelations(self, entities=None):
        '''
        WatchUnitRelations returns a StringsWatcher, for each given
        unit, that notifies of changes to the lifecycles of relations
        relevant to that unit. For principal units, this will be all of the
        relations for the application. For subordinate units, only
        relations with the principal unit's application will be monitored.

        entities : typing.Sequence[~Entity]
        Returns -> StringsWatchResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='WatchUnitRelations',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringsWatchResults)
    async def WatchUnitStorageAttachments(self, entities=None):
        '''
        WatchUnitStorageAttachments creates watchers for a collection of units,
        each of which can be used to watch for lifecycle changes to the corresponding
        unit's storage attachments.

        entities : typing.Sequence[~Entity]
        Returns -> StringsWatchResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='WatchUnitStorageAttachments',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(NotifyWatchResults)
    async def WatchUpgradeSeriesNotifications(self, entities=None):
        '''
        WatchUpgradeSeriesNotifications returns a NotifyWatcher for observing changes to upgrade series locks.

        entities : typing.Sequence[~Entity]
        Returns -> NotifyWatchResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='WatchUpgradeSeriesNotifications',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply



    @ReturnMapping(StringResults)
    async def WorkloadVersion(self, entities=None):
        '''
        WorkloadVersion returns the workload version for all given units or applications.

        entities : typing.Sequence[~Entity]
        Returns -> StringResults
        '''
        if entities is not None and not isinstance(entities, (bytes, str, list)):
            raise Exception("Expected entities to be a Sequence, received: {}".format(type(entities)))

        # map input types to rpc msg
        _params = dict()
        msg = dict(type='Uniter',
                   request='WorkloadVersion',
                   version=18,
                   params=_params)
        _params['entities'] = entities
        reply = await self.rpc(msg)
        return reply


